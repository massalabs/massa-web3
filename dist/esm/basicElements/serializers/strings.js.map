{"version":3,"file":"strings.js","sourceRoot":"","sources":["../../../../src/basicElements/serializers/strings.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAA;AAE3C;;;;;;GAMG;AACH,MAAM,UAAU,UAAU,CAAC,GAAW;IACpC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;QAChB,+DAA+D;QAC/D,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,CAAA;IAC1B,CAAC;IACD,OAAO,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;AACtC,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,UAAU,CAAC,GAAe;IACxC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;QAChB,OAAO,EAAE,CAAA;IACX,CAAC;IAED,IAAI,MAAM,EAAE,EAAE,CAAC;QACb,oGAAoG;QACpG,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAA;QACnD,MAAM,OAAO,GAAG,IAAI,aAAa,CAAC,OAAO,CAAC,CAAA;QAE1C,OAAO,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;IACxC,CAAC;IACD,gEAAgE;IAChE,IAAI,EAAE,WAAW,EAAE,GAAG,MAAM,CAAA;IAC5B,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE,CAAC;QACvC,8DAA8D;QAC9D,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,WAAW,CAAA;IAC3C,CAAC;IACD,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAA;IAE5C,OAAO,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;AAChC,CAAC","sourcesContent":["import { isNode } from '../../utils/isNode'\n\n/**\n * Converts utf-16 string to a Uint8Array.\n *\n * @param str - the string to convert\n *\n * @returns the converted string\n */\nexport function strToBytes(str: string): Uint8Array {\n  if (!str.length) {\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    return new Uint8Array(0)\n  }\n  return new TextEncoder().encode(str)\n}\n\n/**\n * Converts Uint8Array to a string.\n *\n * @param arr - the array to convert\n *\n * @returns A string representation of the array in utf-8 encoding\n */\nexport function bytesToStr(arr: Uint8Array): string {\n  if (!arr.length) {\n    return ''\n  }\n\n  if (isNode()) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/naming-convention\n    const { StringDecoder } = require('string_decoder')\n    const decoder = new StringDecoder('utf-8')\n\n    return decoder.write(Buffer.from(arr))\n  }\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  let { TextDecoder } = window\n  if (typeof TextDecoder === 'undefined') {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    TextDecoder = require('util').TextDecoder\n  }\n  const textDecoder = new TextDecoder('utf-8')\n\n  return textDecoder.decode(arr)\n}\n"]}