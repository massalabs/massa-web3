{"version":3,"file":"i8.js","sourceRoot":"","sources":["../../../../../src/basicElements/serializers/number/i8.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,YAAY,CAAA;AAI5E,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,CAAA;AAC1B,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,CAAA;AACzB,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;AACnD,MAAM,CAAC,MAAM,GAAG,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAA;AAEvD;;;;;;GAMG;AACH,MAAM,UAAU,OAAO,CAAC,KAAS;IAC/B,OAAO,aAAa,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;AAC7C,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,SAAS,CAAC,KAAiB;IACzC,OAAO,eAAe,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;AAC/C,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,UAAU,CACxB,MAAkB,EAClB,MAAc;IAEd,MAAM,KAAK,GAAG,eAAe,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;IAC7D,MAAM,IAAI,SAAS,CAAA;IACnB,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAA;AAC1B,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,UAAU,CAAC,KAAa;IACtC,OAAO,eAAe,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;AAC/C,CAAC","sourcesContent":["import { numberToInteger, integerFromByte, integerToByte } from './integers'\n\nexport type I8 = bigint\n\nexport const SIZE_BYTE = 1\nexport const SIZE_BIT = 8\nexport const MIN = -(1n << (BigInt(SIZE_BIT) - 1n))\nexport const MAX = (1n << (BigInt(SIZE_BIT) - 1n)) - 1n\n\n/**\n * Converts an I8 value to bytes\n *\n * @param value - The number to convert\n * @returns The bytes representation of the number\n * @throws if the value is out of range for I8\n */\nexport function toBytes(value: I8): Uint8Array {\n  return integerToByte(SIZE_BIT, value, true)\n}\n\n/**\n * Converts bytes to an I8 value\n *\n * @remarks\n * Silently ignores bytes that are not needed to represent the I8 value.\n *\n * @param bytes - The bytes to convert\n * @returns The I8 representation of the bytes\n */\nexport function fromBytes(bytes: Uint8Array): I8 {\n  return integerFromByte(SIZE_BIT, bytes, true)\n}\n\n/**\n * Converts an I8 value to a number\n * @param buffer - The buffer to read from\n * @param offset - The optional offset in the buffer at which to start reading the I8 value (default: 0)\n * @returns The I8 representation of the bytes\n */\nexport function fromBuffer(\n  buffer: Uint8Array,\n  offset: number\n): { value: I8; offset: number } {\n  const value = integerFromByte(SIZE_BIT, buffer, true, offset)\n  offset += SIZE_BYTE\n  return { value, offset }\n}\n\n/**\n * Converts a number to an I8 value\n *\n * @param value - The number to convert\n * @returns The I8 representation of the number\n * @throws if the value is not a safe integer or out of range for I8\n */\nexport function fromNumber(value: number): I8 {\n  return numberToInteger(SIZE_BIT, value, true)\n}\n"]}