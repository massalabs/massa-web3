{"version":3,"file":"integers.js","sourceRoot":"","sources":["../../../../../src/basicElements/serializers/number/integers.ts"],"names":[],"mappings":"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","sourcesContent":["import { U8, U16, U32, U64, U128, U256 } from '..'\n\nfunction mustBeValidSigned(sizeInBits: number, value: bigint): void {\n  const min = -(1n << (BigInt(sizeInBits) - 1n))\n  const max = (1n << (BigInt(sizeInBits) - 1n)) - 1n\n  if (value < min || value > max) {\n    throw new Error(`value ${value} is out of range for an I${sizeInBits}.`)\n  }\n}\n\nfunction mustBeValidUnsigned(sizeInBits: number, value: bigint): void {\n  if (value < 0n) {\n    throw new Error(\"negative value can't be serialized as unsigned integer.\")\n  }\n  if (value >= 1n << BigInt(sizeInBits)) {\n    throw new Error(`value ${value} is too large for an U${sizeInBits}.`)\n  }\n}\n\nexport function integerToByte(\n  sizeInBits: number,\n  value: bigint,\n  signed = false\n): Uint8Array {\n  signed\n    ? mustBeValidSigned(sizeInBits, value)\n    : mustBeValidUnsigned(sizeInBits, value)\n\n  const buffer = new ArrayBuffer(sizeInBits / U8.SIZE_BIT)\n  const view = new DataView(buffer)\n  switch (sizeInBits) {\n    case U8.SIZE_BIT:\n      signed ? view.setInt8(0, Number(value)) : view.setUint8(0, Number(value))\n      break\n    case U16.SIZE_BIT:\n      signed\n        ? view.setInt16(0, Number(value), true)\n        : view.setUint16(0, Number(value), true)\n      break\n    case U32.SIZE_BIT:\n      signed\n        ? view.setInt32(0, Number(value), true)\n        : view.setUint32(0, Number(value), true)\n      break\n    case U64.SIZE_BIT:\n      signed\n        ? view.setBigInt64(0, value, true)\n        : view.setBigUint64(0, value, true)\n      break\n    case U128.SIZE_BIT:\n      setBigUint128(view, value)\n      break\n    case U256.SIZE_BIT:\n      setBigUint256(view, value)\n      break\n    default:\n      throw new Error(\n        `unsupported ${signed ? 'I' : 'U'}${sizeInBits} serialization.`\n      )\n  }\n  return new Uint8Array(view.buffer)\n}\n\nexport function integerFromByte(\n  sizeInBits: number,\n  bytes: Uint8Array,\n  signed = false,\n  index = 0\n): bigint {\n  if (bytes.length < index + sizeInBits / U8.SIZE_BIT) {\n    throw new Error('not enough bytes to read the value.')\n  }\n  const view = new DataView(bytes.buffer)\n  switch (sizeInBits) {\n    case U8.SIZE_BIT:\n      return signed ? BigInt(view.getInt8(index)) : BigInt(view.getUint8(index))\n    case U16.SIZE_BIT:\n      return signed\n        ? BigInt(view.getInt16(index, true))\n        : BigInt(view.getUint16(index, true))\n    case U32.SIZE_BIT:\n      return signed\n        ? BigInt(view.getInt32(index, true))\n        : BigInt(view.getUint32(index, true))\n    case U64.SIZE_BIT:\n      return signed\n        ? view.getBigInt64(index, true)\n        : view.getBigUint64(index, true)\n    case U128.SIZE_BIT:\n      return signed ? getBigInt128(view, index) : getBigUint128(view, index)\n    case U256.SIZE_BIT:\n      return signed ? getBigInt256(view, index) : getBigUint256(view, index)\n    default:\n      throw new Error(\n        `unsupported ${signed ? 'I' : 'U'}${sizeInBits} deserialization`\n      )\n  }\n}\n\nexport function numberToInteger(\n  sizeInBits: number,\n  value: number | bigint,\n  signed = false\n): bigint {\n  if (typeof value === 'number' && !Number.isSafeInteger(value)) {\n    throw new Error(`value ${value} is not a safe integer.`)\n  }\n  const int = BigInt(value)\n  signed\n    ? mustBeValidSigned(sizeInBits, int)\n    : mustBeValidUnsigned(sizeInBits, int)\n  return int\n}\n\nfunction setBigUint128(view: DataView, value: bigint): void {\n  const offset = 0\n  view.setBigUint64(offset, value & U64.MAX, true)\n  view.setBigUint64(offset + U64.SIZE_BYTE, value >> BigInt(U64.SIZE_BIT), true)\n}\n\nfunction getBigUint128(view: DataView, offset: number): bigint {\n  const low = view.getBigUint64(offset, true)\n  offset += U64.SIZE_BYTE\n  const high = view.getBigUint64(offset, true)\n  return (high << BigInt(U64.SIZE_BIT)) | low\n}\n\nfunction setBigUint256(view: DataView, value: bigint): void {\n  let offset = 0\n  for (let i = 0; i < U256.SIZE_BYTE / U64.SIZE_BYTE; i++) {\n    view.setBigUint64(offset, value & U64.MAX, true)\n    offset += U64.SIZE_BYTE\n    value >>= BigInt(U64.SIZE_BIT)\n  }\n}\n\nfunction getBigUint256(view: DataView, offset: number): bigint {\n  let result = 0n\n  const nbParts = U256.SIZE_BYTE / U64.SIZE_BYTE\n\n  for (let i = 0; i < nbParts; i++) {\n    const part = view.getBigUint64(offset + i * U64.SIZE_BYTE, true)\n    result = result | (part << BigInt(i * U64.SIZE_BIT))\n  }\n\n  return result\n}\n\nfunction getBigInt128(view: DataView, offset: number): bigint {\n  return BigInt.asIntN(U128.SIZE_BIT, getBigUint128(view, offset))\n}\n\nfunction getBigInt256(view: DataView, offset: number): bigint {\n  return BigInt.asIntN(U256.SIZE_BIT, getBigUint256(view, offset))\n}\n"]}