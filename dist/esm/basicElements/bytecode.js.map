{"version":3,"file":"bytecode.js","sourceRoot":"","sources":["../../../src/basicElements/bytecode.ts"],"names":[],"mappings":"AAYA,OAAO,EACL,gBAAgB,EAChB,uBAAuB,GACxB,MAAM,+BAA+B,CAAA;AAEtC,OAAO,EAAoB,aAAa,EAAE,MAAM,cAAc,CAAA;AAE9D,MAAM,CAAC,MAAM,eAAe,GAAG,WAAW,CAAA;AAU1C,6DAA6D;AAC7D,SAAS,OAAO,CAAC,OAAe;IAC9B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAA;AACpC,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,OAAO,CAC3B,MAAiB,EACjB,UAAsB,EACtB,QAAoB,EACpB,IAAmB;IAEnB,MAAM,SAAS,GAAG,IAAI,gBAAgB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;IAE1D,MAAM,OAAO,GAAqB;QAChC,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,MAAM,CAAC,aAAa,EAAE,CAAC;QAChD,YAAY,EAAE,MAAM,uBAAuB,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC;QACtE,IAAI,EAAE,aAAa,CAAC,4BAA4B;QAChD,QAAQ,EAAE,IAAI,EAAE,QAAQ,IAAI,EAAE;QAC9B,MAAM,EAAE,IAAI,EAAE,MAAM,IAAI,eAAe;QACvC,kBAAkB,EAAE,QAAQ;QAC5B,SAAS,EAAE,IAAI,CAAC,SAAS;KAC1B,CAAA;IAED,OAAO,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;AAChC,CAAC","sourcesContent":["/**\n * A module to compile and execute byte code.\n *\n * @remarks\n * The difference between byte code and a smart contract is that the byte code is the raw code that will be\n * executed on the blockchain, while a smart contract is the code that is already deployed on the blockchain.\n * The byte code is only ephemeral and will be executed only once.\n * A smart contract has an address and exposes functions that can be called multiple times.\n *\n */\nimport { PublicAPI } from '../client'\nimport { PrivateKey } from './keys'\nimport {\n  OperationManager,\n  getAbsoluteExpirePeriod,\n} from '../operation/operationManager'\nimport { U64 } from './serializers/number/u64'\nimport { ExecuteOperation, OperationType } from '../operation'\n\nexport const MAX_GAS_EXECUTE = 3980167295n\n\ntype ExecuteOption = {\n  fee?: U64\n  periodToLive?: number\n  maxCoins?: U64\n  maxGas?: U64\n  datastore?: Map<Uint8Array, Uint8Array>\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction compile(_source: string): Promise<Uint8Array> {\n  throw new Error('Not implemented')\n}\n\n/**\n *\n * Executes a byte code on the blockchain.\n *\n * @param client - The client to connect to the desired blockchain.\n * @param privateKey - The private key of the account that will execute the byte code.\n * @param byteCode - The byte code to execute.\n * @param opts - Optional execution details.\n *\n * @returns The operation.\n */\nexport async function execute(\n  client: PublicAPI,\n  privateKey: PrivateKey,\n  byteCode: Uint8Array,\n  opts: ExecuteOption\n): Promise<string> {\n  const operation = new OperationManager(privateKey, client)\n\n  const details: ExecuteOperation = {\n    fee: opts?.fee ?? (await client.getMinimalFee()),\n    expirePeriod: await getAbsoluteExpirePeriod(client, opts.periodToLive),\n    type: OperationType.ExecuteSmartContractBytecode,\n    maxCoins: opts?.maxCoins ?? 0n,\n    maxGas: opts?.maxGas || MAX_GAS_EXECUTE,\n    contractDataBinary: byteCode,\n    datastore: opts.datastore,\n  }\n\n  return operation.send(details)\n}\n"]}