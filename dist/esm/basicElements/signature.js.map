{"version":3,"file":"signature.js","sourceRoot":"","sources":["../../../src/basicElements/signature.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,kBAAkB,CAAA;AAErC,OAAO,EAAE,OAAO,EAAa,MAAM,gCAAgC,CAAA;AACnE,OAAO,eAAe,MAAM,2BAA2B,CAAA;AAEvD,MAAM,eAAe,GAAG,OAAO,CAAC,EAAE,CAAA;AAElC;;;;GAIG;AACH,6DAA6D;AAC7D,SAAS,UAAU,CAAC,IAAyB;IAC3C,2EAA2E;IAC3E,wGAAwG;IACxG,OAAO,OAAO,CAAC,EAAE,CAAA;AACnB,CAAC;AAED;;GAEG;AACH,MAAM,OAAO,SAAS;IAKX;IACA;IACA;IANT,kDAAkD;IAC1C,KAAK,CAAY;IAEzB,YACS,UAAsB,EACtB,SAAoB,EACpB,OAAgB;QAFhB,eAAU,GAAV,UAAU,CAAY;QACtB,cAAS,GAAT,SAAS,CAAW;QACpB,YAAO,GAAP,OAAO,CAAS;IACtB,CAAC;IAEJ;;;;;;OAMG;IACO,MAAM,CAAC,eAAe,CAC9B,UAAmB,eAAe;QAElC,QAAQ,OAAO,EAAE,CAAC;YAChB,KAAK,OAAO,CAAC,EAAE;gBACb,OAAO,IAAI,SAAS,CAAC,IAAI,MAAM,EAAE,EAAE,IAAI,eAAe,EAAE,EAAE,OAAO,CAAC,CAAA;YACpE;gBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,OAAO,EAAE,CAAC,CAAA;QACtD,CAAC;IACH,CAAC;IAED;;;;;;;;OAQG;IACI,MAAM,CAAC,UAAU,CAAC,GAAW;QAClC,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;QAC/B,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;QAEpD,IAAI,CAAC;YACH,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;YACvD,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,OAAO,CAC/D,SAAS,CAAC,KAAK,CAChB,CAAA;YAED,eAAe;YACf,IAAI,gBAAgB,KAAK,OAAO,EAAE,CAAC;gBACjC,MAAM,IAAI,KAAK,CACb,oBAAoB,OAAO,KAAK,SAAS,CAAC,OAAO,gBAAgB,CAClE,CAAA;YACH,CAAC;QACH,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;QAC3D,CAAC;QAED,OAAO,SAAS,CAAA;IAClB,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,SAAS,CAAC,KAAiB;QACvC,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,CAAA;QACjC,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;QACpD,SAAS,CAAC,KAAK,GAAG,KAAK,CAAA;QAEvB,eAAe;QACf,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,GAAG,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QACxE,IAAI,gBAAgB,KAAK,OAAO,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CACb,oBAAoB,OAAO,KAAK,SAAS,CAAC,OAAO,gBAAgB,CAClE,CAAA;QACH,CAAC;QACD,OAAO,SAAS,CAAA;IAClB,CAAC;IAED;;;;OAIG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,KAAK,CAAA;IACnB,CAAC;IAED;;;;OAIG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAC9C,CAAC;CACF","sourcesContent":["import Base58 from '../crypto/base58'\nimport Serializer from '../crypto/interfaces/serializer'\nimport { Version, Versioner } from '../crypto/interfaces/versioner'\nimport VarintVersioner from '../crypto/varintVersioner'\n\nconst DEFAULT_VERSION = Version.V0\n\n/**\n * Get the signature version.\n *   *\n * @returns the signature version.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction getVersion(data: string | Uint8Array): Version {\n  // when a new version will come, implement the logic to detect version here\n  // This should be done without serializer and versionner as they are potentially not known at this point\n  return Version.V0\n}\n\n/**\n * A class representing a signature.\n */\nexport class Signature {\n  // The signature in byte format. Version included.\n  private bytes: Uint8Array\n\n  protected constructor(\n    public serializer: Serializer,\n    public versioner: Versioner,\n    public version: Version\n  ) {}\n\n  /**\n   * Initializes a new signature object from a version.\n   *\n   * @param version - The version of the signature.\n   *\n   * @returns A new signature instance.\n   */\n  protected static initFromVersion(\n    version: Version = DEFAULT_VERSION\n  ): Signature {\n    switch (version) {\n      case Version.V0:\n        return new Signature(new Base58(), new VarintVersioner(), version)\n      default:\n        throw new Error(`unsupported version: ${version}`)\n    }\n  }\n\n  /**\n   * Initializes a new signature object from a serialized string.\n   *\n   * @param str - The serialized signature string.\n   *\n   * @returns A new signature instance.\n   *\n   * @throws If the signature string is invalid.\n   */\n  public static fromString(str: string): Signature {\n    const version = getVersion(str)\n    const signature = Signature.initFromVersion(version)\n\n    try {\n      signature.bytes = signature.serializer.deserialize(str)\n      const { version: extractedVersion } = signature.versioner.extract(\n        signature.bytes\n      )\n\n      // safety check\n      if (extractedVersion !== version) {\n        throw new Error(\n          `invalid version: ${version}. ${signature.version} was expected.`\n        )\n      }\n    } catch (e) {\n      throw new Error(`invalid signature string: ${e.message}`)\n    }\n\n    return signature\n  }\n\n  /**\n   * Initializes a signature object from a byte array.\n   *\n   * @param bytes - The signature bytes.\n   *\n   * @returns A signature object.\n   */\n  public static fromBytes(bytes: Uint8Array): Signature {\n    const version = getVersion(bytes)\n    const signature = Signature.initFromVersion(version)\n    signature.bytes = bytes\n\n    // safety check\n    const { version: extractedVersion } = signature.versioner.extract(bytes)\n    if (extractedVersion !== version) {\n      throw new Error(\n        `invalid version: ${version}. ${signature.version} was expected.`\n      )\n    }\n    return signature\n  }\n\n  /**\n   * Get signature in bytes format.\n   *\n   * @returns The versioned signature key bytes.\n   */\n  public toBytes(): Uint8Array {\n    return this.bytes\n  }\n\n  /**\n   * Serializes the signature to a string.\n   *\n   * @returns The serialized signature string.\n   */\n  public toString(): string {\n    return this.serializer.serialize(this.bytes)\n  }\n}\n"]}