{"version":3,"file":"eventsPoller.js","sourceRoot":"","sources":["../../../src/events/eventsPoller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Provider } from '../provider'\nimport { EventFilter, NB_THREADS, SCEvent, Slot } from '../client'\nimport EventEmitter from 'eventemitter3'\n\n/** Smart Contracts Event Poller */\nexport const ON_MASSA_EVENT_DATA = 'ON_MASSA_EVENT'\nexport const ON_MASSA_EVENT_ERROR = 'ON_MASSA_ERROR'\n\nexport const DEFAULT_POLL_INTERVAL_MS = 1000\n\n// get the next slot\nfunction nextSlot(prevSlot: Slot): Slot {\n  const slot = prevSlot\n  if (slot.thread < NB_THREADS - 1) {\n    slot.thread++\n  } else {\n    slot.thread = 0\n    slot.period++\n  }\n  return slot\n}\n\n/**\n * The EventPoller class provides a convenient way to poll events from the Massa network.\n */\nexport class EventPoller extends EventEmitter {\n  private intervalId: NodeJS.Timeout\n  private lastSlot: Slot\n\n  /**\n   * Constructor of the EventPoller object.\n   *\n   * @param provider - The provider to use for polling.\n   * @param eventsFilter - The filter to use for the events.\n   * @param pollIntervalMs - The interval in milliseconds to poll for events.\n   */\n  public constructor(\n    private readonly provider: Provider,\n    private readonly eventsFilter: EventFilter,\n    private readonly pollIntervalMs: number\n  ) {\n    super()\n  }\n\n  private poll = async (): Promise<void> => {\n    try {\n      if (this.lastSlot) {\n        this.eventsFilter.start = nextSlot(this.lastSlot)\n      }\n\n      const events = await this.provider.getEvents(this.eventsFilter)\n\n      if (events.length) {\n        this.emit(ON_MASSA_EVENT_DATA, events)\n        this.lastSlot = events[events.length - 1].context.slot\n      }\n    } catch (ex) {\n      this.emit(ON_MASSA_EVENT_ERROR, ex)\n    }\n  }\n\n  /**\n   * Stops polling for events.\n   */\n  private stop = (): void => {\n    if (this.intervalId) {\n      clearInterval(this.intervalId)\n    }\n  }\n\n  /**\n   * Starts polling for events.\n   */\n  private start(): void {\n    this.stop()\n    this.intervalId = setInterval(this.poll, this.pollIntervalMs)\n  }\n\n  /**\n   * Starts polling for events and returns the stopPolling function.\n   *\n   * @param provider - The provider to use for polling.\n   * @param eventsFilter - The filter to use for the events.\n   * @param onData - The callback function to call when new events are found.\n   * @param onError - The callback function to call when an error occurs.\n   * @param pollIntervalMs - The interval in milliseconds to poll for events. Default is 1000Ms.\n   *\n   * @returns An object containing the stopPolling function.\n   */\n  // eslint-disable-next-line max-params\n  public static start(\n    provider: Provider,\n    eventsFilter: EventFilter,\n    onData?: (data: SCEvent[]) => void,\n    onError?: (err: Error) => void,\n    pollIntervalMs = DEFAULT_POLL_INTERVAL_MS\n  ): { stopPolling: () => void } {\n    const eventPoller = new EventPoller(provider, eventsFilter, pollIntervalMs)\n    if (onData) {\n      eventPoller.on(ON_MASSA_EVENT_DATA, onData)\n    }\n    if (onError) {\n      eventPoller.on(ON_MASSA_EVENT_ERROR, onError)\n    }\n\n    eventPoller.start()\n\n    return {\n      stopPolling: eventPoller.stop,\n    }\n  }\n}\n"]}