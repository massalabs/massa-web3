{"version":3,"file":"smartContracts.js","sourceRoot":"","sources":["../../../../src/provider/web3Provider/smartContracts.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Account,\n  DatastoreEntry,\n  minBigInt,\n  PublicAPI,\n  strToBytes,\n} from '../..'\nimport { U64 } from '../../basicElements/serializers/number/u64'\nimport { ErrorInsufficientBalance, ErrorMaxGas } from '../../errors'\nimport { MAX_GAS_CALL, MIN_GAS_CALL } from '../../smartContracts'\nimport {\n  CallSCParams,\n  DeploySCParams,\n  ReadSCParams,\n  GAS_ESTIMATION_TOLERANCE,\n  ReadSCData,\n} from '..'\nimport * as StorageCost from '../../basicElements/storage'\nimport { populateDatastore } from '../../dataStore'\nimport { execute } from '../../basicElements/bytecode'\nimport { DEPLOYER_BYTECODE } from '../../generated/deployer-bytecode'\nimport { Mas } from '../../basicElements/mas'\nimport { CallOperation, OperationType } from '../../operation'\nimport {\n  getAbsoluteExpirePeriod,\n  OperationManager,\n} from '../../operation/operationManager'\n\nexport class SCProvider {\n  constructor(\n    public client: PublicAPI,\n    public account: Account\n  ) {}\n\n  /**\n   * Reads smart contract function.\n   * @param params - readSCParams.\n   * @returns A promise that resolves to a ReadSCData.\n   */\n  async readSC(params: ReadSCParams): Promise<ReadSCData> {\n    const args = params.parameter ?? new Uint8Array()\n    const caller = params.caller ?? this.account.address.toString()\n    const readOnlyParams = {\n      ...params,\n      caller,\n      parameter:\n        args instanceof Uint8Array ? args : Uint8Array.from(args.serialize()),\n    }\n    return this.client.executeReadOnlyCall(readOnlyParams)\n  }\n\n  /**\n   * Executes a smart contract call operation\n   * @param params - callSCParams.\n   * @returns A promise that resolves to an Operation object representing the transaction.\n   */\n  protected async call(params: CallSCParams): Promise<string> {\n    const coins = params.coins ?? 0n\n    await this.checkAccountBalance(coins)\n\n    const args = params.parameter ?? new Uint8Array()\n    const parameter =\n      args instanceof Uint8Array ? args : Uint8Array.from(args.serialize())\n\n    const fee = params.fee ?? (await this.client.getMinimalFee())\n\n    let maxGas = params.maxGas\n    if (!maxGas) {\n      maxGas = await this.getGasEstimation(params)\n    } else {\n      if (maxGas > MAX_GAS_CALL) {\n        throw new ErrorMaxGas({ isHigher: true, amount: MAX_GAS_CALL })\n      } else if (maxGas < MIN_GAS_CALL) {\n        throw new ErrorMaxGas({ isHigher: false, amount: MIN_GAS_CALL })\n      }\n    }\n\n    const details: CallOperation = {\n      fee,\n      expirePeriod: await getAbsoluteExpirePeriod(\n        this.client,\n        params.periodToLive\n      ),\n      type: OperationType.CallSmartContractFunction,\n      coins,\n      maxGas,\n      address: params.target,\n      func: params.func,\n      parameter,\n    }\n\n    const manager = new OperationManager(this.account.privateKey, this.client)\n    return manager.send(details)\n  }\n\n  /**\n   * Returns the gas estimation for a given function.\n   *\n   * @remarks To avoid running out of gas, the gas estimation is increased by 20%.\n   *\n   * @param params - callSCParams.\n   * @throws If the read operation returns an error.\n   * @returns The gas estimation for the function.\n   */\n  protected async getGasEstimation(params: CallSCParams): Promise<U64> {\n    const result = await this.readSC(params)\n\n    if (result.info.error) {\n      throw new Error(result.info.error)\n    }\n\n    const gasCost = BigInt(result.info.gasCost)\n    return minBigInt(\n      // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n      gasCost + (gasCost * GAS_ESTIMATION_TOLERANCE) / 100n,\n      MAX_GAS_CALL\n    )\n  }\n\n  protected async checkAccountBalance(coins: Mas): Promise<void> {\n    if (coins > 0n) {\n      const balance = await this.client.getBalance(\n        this.account.address.toString()\n      )\n      if (balance < coins) {\n        throw new ErrorInsufficientBalance({\n          userBalance: balance,\n          neededBalance: coins,\n        })\n      }\n    }\n  }\n\n  /**\n   * Deploys a smart contract on the blockchain.\n   *\n   * @param params - Optional deployment details with defaults as follows:\n   * @param params.fee - Execution fee, auto-estimated if absent.\n   * @param params.maxCoins - Maximum number of coins to use, auto-estimated if absent.\n   * @param params.maxGas - Maximum execution gas, auto-estimated if absent.\n   * @param params.periodToLive - Duration in blocks before the transaction expires, defaults to 10.\n   * @param params.waitFinalExecution - Whether to wait for the transaction to be finalized, defaults to true.\n   *\n   *\n   * @returns The deployed smart contract.\n   *\n   * @throws If the account has insufficient balance to deploy the smart contract.\n   */\n  protected async deploy(params: DeploySCParams): Promise<string> {\n    const coins = params.coins ?? 0n\n    const totalCost = StorageCost.smartContract(params.byteCode.length) + coins\n\n    await this.checkAccountBalance(totalCost)\n\n    const args = params.parameter ?? new Uint8Array()\n    const parameter =\n      args instanceof Uint8Array ? args : Uint8Array.from(args.serialize())\n\n    const datastore = populateDatastore([\n      {\n        data: params.byteCode,\n        args: parameter,\n        coins,\n      },\n    ])\n\n    const fee = params.fee ?? (await this.client.getMinimalFee())\n\n    return execute(this.client, this.account.privateKey, DEPLOYER_BYTECODE, {\n      fee,\n      periodToLive: params.periodToLive,\n      maxCoins: totalCost,\n      maxGas: params.maxGas,\n      datastore,\n    })\n  }\n\n  public async getStorageKeys(\n    address: string,\n    filter: Uint8Array | string = new Uint8Array(),\n    final = true\n  ): Promise<Uint8Array[]> {\n    const filterBytes: Uint8Array =\n      typeof filter === 'string' ? strToBytes(filter) : filter\n    return this.client.getDataStoreKeys(address, filterBytes, final)\n  }\n\n  public async readStorage(\n    address: string,\n    keys: Uint8Array[] | string[],\n    final = true\n  ): Promise<Uint8Array[]> {\n    const entries: DatastoreEntry[] = keys.map((key) => ({ address, key }))\n    return this.client.getDatastoreEntries(entries, final)\n  }\n}\n"]}