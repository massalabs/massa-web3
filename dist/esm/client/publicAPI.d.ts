import { Mas } from '../basicElements';
import { SendOperationInput, EventFilter as EvtFilter, ReadOnlyCallResult, TransportOptions, Transport, ClientOptions, DatastoreEntry } from '.';
import { OperationInput, Pagination, ExecuteReadOnlyResponse, MassaOpenRPCSpecification, ReadOnlyCall, ReadOnlyBytecodeExecution, AddressInfo, Block, BlockId, BlockInfo, Clique, Transfer, Slot, EndorsementInfo, GraphInterval, NodeStatus, OperationInfo, SCOutputEvent, Staker, OperationId, AddressFilter } from '../generated/client';
import { OperationStatus, ReadOnlyParams } from '../operation';
export declare class PublicAPI {
    options: Partial<ClientOptions>;
    connector: MassaOpenRPCSpecification;
    lastStatus: NodeStatus;
    constructor(transport: Transport, host: string, port: number, opts?: TransportOptions, options?: Partial<ClientOptions>);
    executeReadOnlyBytecode(readOnlyBytecodeExecution: ReadOnlyBytecodeExecution): Promise<ExecuteReadOnlyResponse>;
    executeMultipleReadOnlyBytecode(readOnlyBytecodeExecutions: ReadOnlyBytecodeExecution[]): Promise<ExecuteReadOnlyResponse[]>;
    executeReadOnlyCall(params: ReadOnlyParams): Promise<ReadOnlyCallResult>;
    executeMultipleReadOnlyCall(readOnlyCalls: ReadOnlyCall[]): Promise<ExecuteReadOnlyResponse[]>;
    getAddressInfo(address: string): Promise<AddressInfo>;
    getBalance(address: string, final?: boolean): Promise<Mas.Mas>;
    getMultipleAddressInfo(addresses: string[]): Promise<AddressInfo[]>;
    getAddressesBytecode(addressFilter: AddressFilter): Promise<string>;
    executeMultipleGetAddressesBytecode(addressFilters: AddressFilter[]): Promise<string[]>;
    getBlock(blockId: BlockId): Promise<BlockInfo>;
    getMultipleBlocks(blockIds: BlockId[]): Promise<BlockInfo[]>;
    getBlockcliqueBlock(slot: Slot): Promise<Block>;
    getCliques(): Promise<Clique[]>;
    getDataStoreKeys(contract: string, filter?: Uint8Array, final?: boolean): Promise<Uint8Array[]>;
    getDatastoreEntries(inputs: DatastoreEntry[], final?: boolean): Promise<Uint8Array[]>;
    getDatastoreEntry(key: string | Uint8Array, address: string, final?: boolean): Promise<Uint8Array>;
    getSlotTransfers(slot: Slot): Promise<Transfer[]>;
    getMultipleSlotTransfers(slots: Slot[]): Promise<Transfer[][]>;
    getEndorsement(endorsementId: string): Promise<EndorsementInfo>;
    getMultipleEndorsements(endorsementIds: string[]): Promise<EndorsementInfo[]>;
    getEvents(filter: EvtFilter): Promise<SCOutputEvent[]>;
    getGraphInterval(start?: number, end?: number): Promise<GraphInterval[]>;
    getOperations(operationIds: string[]): Promise<OperationInfo[]>;
    getOperation(operationId: string): Promise<OperationInfo>;
    getOperationStatus(operationId: string): Promise<OperationStatus>;
    getStakers(pagination: Pagination): Promise<Staker[]>;
    status(): Promise<NodeStatus>;
    getMinimalFee(): Promise<bigint>;
    getChainId(): Promise<bigint>;
    fetchPeriod(): Promise<number>;
    getCurrentSlot(): Promise<Slot>;
    private static convertOperationInput;
    sendOperation(data: SendOperationInput): Promise<OperationId>;
    sendOperations(data: SendOperationInput[]): Promise<OperationId[]>;
    sendMultipleOperations(data: OperationInput[]): Promise<OperationId[]>;
}
