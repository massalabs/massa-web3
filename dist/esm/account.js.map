{"version":3,"file":"account.js","sourceRoot":"","sources":["../../src/account.ts"],"names":[],"mappings":"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","sourcesContent":["import { Version } from './crypto/interfaces/versioner'\nimport Sealer from './crypto/interfaces/sealer'\nimport { PasswordSeal } from './crypto/passwordSeal'\nimport { Address, PrivateKey, PublicKey, Signature } from './basicElements'\n\n/**\n * A class representing an account.\n */\nexport class Account {\n  public sealer: Sealer\n\n  private constructor(\n    public privateKey: PrivateKey,\n    public publicKey: PublicKey,\n    public address: Address,\n    public version: Version\n  ) {}\n\n  /**\n   * Initializes a new account object from a private key.\n   *\n   * @param key - The private key of the account.\n   * @param version - The version of the account.\n   *\n   * @returns A new instance of the Account class.\n   */\n  public static async fromPrivateKey(\n    key: string | PrivateKey,\n    version: Version = Version.V1\n  ): Promise<Account> {\n    if (typeof key === 'string') {\n      key = PrivateKey.fromString(key)\n    }\n    const publicKey = await key.getPublicKey()\n    const address = publicKey.getAddress()\n\n    return new Account(key, publicKey, address, version)\n  }\n\n  /**\n   * Generates a new account object.\n   *\n   * @param version - The version of the account.\n   *\n   * @returns A new instance of the Account class.\n   */\n  public static async generate(version?: Version): Promise<Account> {\n    const privateKey = PrivateKey.generate()\n    return Account.fromPrivateKey(privateKey, version)\n  }\n\n  /**\n   * Signs a message.\n   *\n   * @remarks\n   * This function signs a byte-encoded message with the account private key.\n   * The message is first hashed and then signed.\n   * Do not pass a digest to this function as it will be hashed twice.\n   *\n   * @param message - The byte array to sign.\n   *\n   * @returns A signature object.\n   */\n  sign(message: Uint8Array): Promise<Signature> {\n    return this.privateKey.sign(message)\n  }\n\n  /**\n   * Verifies a message signature.\n   *\n   * @remarks\n   * This function verifies a byte-encoded message signature using the account's public key.\n   * The message is first hashed and then the signature is verified against the hashed message.\n   * Do not pass a digest to this function as it will be hashed twice.\n   *\n   * @param signature - The signature to verify.\n   * @param message - The byte array that was signed.\n   *\n   * @returns A boolean indicating whether the signature is valid.\n   */\n  verify(message: Uint8Array, signature: Signature): Promise<boolean> {\n    return this.publicKey.verify(message, signature)\n  }\n\n  /**\n   * Encodes the account to a serializable object.\n   *\n   * @remarks\n   * The serializable object can be serialized to any format (JSON, YAML, XML, etc.) on any support (file, database, browser storage, etc.).\n   * The keystore format is defined in the Massa standard format document:\n   * [Massa Standard Format](https://github.com/massalabs/massa-standards/blob/main/wallet/file-format.md)\n   *\n   * @param password - The password to encrypt the private key.\n   * @param salt - The salt to use for the encryption. If not provided, a random salt will be generated.\n   * @param nonce - The nonce to use for the encryption. If not provided, a random nonce will be generated.\n   *\n   * @returns A serializable object.\n   *\n   * @throws If the password is not provided for V0 and V1 keystores.\n   * @throws If the version is not supported.\n   */\n  async toKeyStore(\n    password?: string,\n    salt?: Uint8Array,\n    nonce?: Uint8Array\n  ): Promise<AccountKeyStore> {\n    switch (this.version) {\n      case Version.V0: {\n        if (!password) {\n          throw new Error('Password is required for V0 keystore')\n        }\n        const passwordSeal = new PasswordSeal(password, salt, nonce)\n\n        /* eslint-disable @typescript-eslint/naming-convention */\n        // It is mandatory to follow the Massa standard.\n        return {\n          Address: this.address.toString(),\n          Version: this.version,\n          Nickname: '',\n          Salt: passwordSeal.salt,\n          Nonce: passwordSeal.nonce,\n          CipheredData: await passwordSeal\n            .seal(this.privateKey.toBytes())\n            .then((a) => Array.from(a)),\n          PublicKey: Array.from(this.publicKey.toBytes()),\n        } as AccountV0KeyStore\n        /* eslint-enable @typescript-eslint/naming-convention */\n      }\n      case Version.V1: {\n        if (!password) {\n          throw new Error('Password is required for V1 keystore')\n        }\n        const passwordSeal = new PasswordSeal(password, salt, nonce)\n\n        /* eslint-disable @typescript-eslint/naming-convention */\n        // It is mandatory to follow the Massa standard.\n        return {\n          Address: this.address.toString(),\n          Version: this.version,\n          Nickname: '',\n          Salt: passwordSeal.salt,\n          Nonce: passwordSeal.nonce,\n          CipheredData: await passwordSeal\n            .seal(this.privateKey.toBytes())\n            .then((a) => Array.from(a)),\n          PublicKey: Array.from(this.publicKey.toBytes()),\n        } as AccountV1KeyStore\n        /* eslint-enable @typescript-eslint/naming-convention */\n      }\n      default:\n        throw new Error(`unsupported version`)\n    }\n  }\n\n  /**\n   * Decodes the account from a serializable object.\n   *\n   * @remarks\n   * The serializable object can be serialized to any format (JSON, YAML, XML, etc.) on any support (file, database, browser storage, etc.).\n   * The keystore format is defined in the Massa standard format document:\n   * [Massa Standard Format](https://github.com/massalabs/massa-standards/blob/main/wallet/file-format.md)\n   *\n   * @param password - The password to decrypt the private key.\n   * @param keystore - The serializable object to decode.\n   *\n   * @returns A new Account instance.\n   *\n   * @throws If the password is not provided for V0 and V1 keystores.\n   * @throws If the version is not supported.\n   */\n  static async fromKeyStore(\n    keystore: AccountKeyStore,\n    password?: string\n  ): Promise<Account> {\n    switch (keystore.Version) {\n      case Version.V0: {\n        if (!password) {\n          throw new Error('Password is required for V0 keystore')\n        }\n        const passwordSeal = new PasswordSeal(\n          password,\n          keystore.Salt,\n          keystore.Nonce\n        )\n        const privateKeyBytes = await passwordSeal.unseal(keystore.CipheredData)\n        const privateKey = PrivateKey.fromBytes(privateKeyBytes)\n        const publicKey = PublicKey.fromBytes(\n          Uint8Array.from(keystore.PublicKey)\n        )\n        const address = publicKey.getAddress()\n        // TODO: add a consistency check with the address in the keystore\n\n        return new Account(privateKey, publicKey, address, keystore.Version)\n      }\n      case Version.V1: {\n        if (!password) {\n          throw new Error('Password is required for V1 keystore')\n        }\n        const passwordSeal = new PasswordSeal(\n          password,\n          keystore.Salt,\n          keystore.Nonce\n        )\n\n        const privateKeyBytes = await passwordSeal.unseal(keystore.CipheredData)\n\n        const privateKey = PrivateKey.fromBytes(privateKeyBytes)\n        const publicKey = PublicKey.fromBytes(\n          Uint8Array.from(keystore.PublicKey)\n        )\n        const address = publicKey.getAddress()\n        // TODO: add a consistency check with the address in the keystore\n        return new Account(privateKey, publicKey, address, keystore.Version)\n      }\n      default:\n        throw new Error(`unsupported version`)\n    }\n  }\n\n  /**\n   * Uses the environment variables to create an account.\n   *\n   * @param key - The environment variable key containing the private key.\n   *\n   * @remarks\n   * The `PRIVATE_KEY` or the provided key is required in the environment variables.\n   *\n   * @returns An account instance.\n   */\n  static async fromEnv(key?: string): Promise<Account> {\n    return Account.fromPrivateKey(PrivateKey.fromEnv(key))\n  }\n\n  // TODO fix js-yaml import in browser\n  // /**\n  //  * Uses the environment variables to create an account.\n  //  *\n  //  * @returns An account instance.\n  //  */\n  // static async fromYaml(path: string, password: string): Promise<Account> {\n  //   if (typeof window !== 'undefined' || !fs || !yaml) {\n  //     throw new Error('This function is not available in the browser')\n  //   }\n  //   // check that file exists\n  //   if (!fs.existsSync(path)) {\n  //     throw new Error(`wallet file \"${path}\" does not exist.`)\n  //   }\n\n  //   const ks = yaml.load(fs.readFileSync(path, 'utf8')) as AccountKeyStore\n  //   return Account.fromKeyStore(ks, password)\n  // }\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\n// It is mandatory to follow the Massa standard.\nexport type AccountKeyStoreBase = {\n  Address: string\n  Nickname: string\n  Salt: Uint8Array\n  Nonce: Uint8Array\n  CipheredData: Uint8Array\n  PublicKey: number[]\n}\n\nexport type AccountV0KeyStore = AccountKeyStoreBase & { Version: Version.V0 }\nexport type AccountV1KeyStore = AccountKeyStoreBase & { Version: Version.V1 }\n/* eslint-enable @typescript-eslint/naming-convention */\nexport type AccountKeyStore = AccountV0KeyStore | AccountV1KeyStore\n"]}