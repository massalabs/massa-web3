{"version":3,"file":"cross-browser.js","sourceRoot":"","sources":["../../../src/crypto/cross-browser.ts"],"names":[],"mappings":"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","sourcesContent":["/* This module contains cryptographic functions federating between Node.js and the browser.\n * @packageDocumentation\n *\n * @privateRemarks\n * If you extend this module, please check that the functions are working in both Node.js and the browser.\n */\n\nconst KEY_SIZE_BYTES = 32\nconst IV_SIZE_BYTES = 12\nconst AUTH_TAG_SIZE_BYTES = 16\n\nconst U8_SIZE_BITS = 8\n\nfunction isNode(): boolean {\n  // inspired from secure-random.js\n  // we check for process.pid to prevent browserify from tricking us\n  return (\n    typeof process !== 'undefined' &&\n    typeof process.pid === 'number' &&\n    typeof process.versions?.node === 'string'\n  )\n}\n\nasync function pbkdf2Node(\n  password: string,\n  salt: Buffer,\n  opts: PBKDF2Options\n): Promise<Uint8Array> {\n  const { iterations, keyLength, hash } = opts\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const crypto = require('crypto')\n  return new Promise((resolve, reject) => {\n    crypto.pbkdf2(\n      password,\n      salt,\n      iterations,\n      keyLength,\n      hash,\n      (err, derivedKey) => {\n        if (err) reject(err)\n        else resolve(derivedKey)\n      }\n    )\n  })\n}\n\nasync function pbkdf2Browser(\n  password: string,\n  salt: Buffer,\n  opts: PBKDF2Options\n): Promise<Uint8Array> {\n  const { iterations, keyLength, hash } = opts\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const crypto = window.crypto || (window as any).msCrypto\n\n  if (!crypto) throw new Error('Your browser does not expose window.crypto.')\n\n  const keyMaterial = await crypto.subtle.importKey(\n    'raw',\n    new TextEncoder().encode(password),\n    { name: 'PBKDF2' },\n    false,\n    ['deriveBits', 'deriveKey']\n  )\n  const derivedKey = await crypto.subtle.deriveKey(\n    {\n      name: 'PBKDF2',\n      salt: salt,\n      iterations: iterations,\n      hash: { name: hash },\n    },\n    keyMaterial,\n    { name: 'AES-GCM', length: keyLength * U8_SIZE_BITS },\n    false,\n    ['encrypt', 'decrypt']\n  )\n\n  const exportedKey = await crypto.subtle.exportKey('raw', derivedKey)\n  const buffer = Buffer.from(exportedKey)\n\n  return buffer\n}\n\nexport type PBKDF2Options = {\n  iterations: number\n  keyLength: number\n  hash: string\n}\n\n/**\n * Derives a cryptographic key using PBKDF2.\n *\n * @param password - The password from which to derive the key.\n * @param salt - The cryptographic salt.\n * @param opts - Options for the derivation.\n *\n * @returns  The derived key.\n */\nexport async function pbkdf2(\n  password: string,\n  salt: Buffer,\n  opts: PBKDF2Options\n): Promise<Uint8Array> {\n  if (isNode()) {\n    return pbkdf2Node(password, salt, opts)\n  }\n\n  return pbkdf2Browser(password, salt, opts)\n}\n\n/**\n * Seals data using AES-256-GCM encryption.\n *\n * @param data - The data to encrypt.\n * @param key - The 32-byte secret key.\n * @param iv - The 12-byte initialization vector.\n *\n * @throws If the key is not 32 bytes.\n * @throws If the iv is not 12 bytes.\n *\n * @returns The encrypted data.\n */\nexport async function aesGCMEncrypt(\n  data: Uint8Array,\n  key: Uint8Array,\n  iv: Uint8Array\n): Promise<Uint8Array> {\n  if (key.length !== KEY_SIZE_BYTES) {\n    throw new Error(`key must be ${KEY_SIZE_BYTES} bytes`)\n  }\n  if (iv.length !== IV_SIZE_BYTES) {\n    throw new Error(`iv must be ${IV_SIZE_BYTES} bytes`)\n  }\n  if (isNode()) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const crypto = require('crypto')\n    const cipher = crypto.createCipheriv('aes-256-gcm', key, iv)\n    const encrypted = Buffer.concat([\n      cipher.update(data),\n      cipher.final(),\n      cipher.getAuthTag(),\n    ])\n    return encrypted\n  }\n\n  const keyData = await window.crypto.subtle.importKey(\n    'raw',\n    key,\n    { name: 'AES-GCM' },\n    false,\n    ['encrypt']\n  )\n  const encrypted = await window.crypto.subtle.encrypt(\n    { name: 'AES-GCM', iv: iv },\n    keyData,\n    data\n  )\n  return Buffer.from(encrypted)\n}\n\n/**\n * Unseals data using AES-256-GCM decryption.\n *\n * @remarks\n * The authentication tag shall be appended to the encryptedData.\n *\n * @param encryptedData - The data to decrypt.\n * @param key - The 32-byte secret key.\n * @param iv - The 12-byte initialization vector.\n *\n * @throws If the key is not 32 bytes.\n * @throws If the iv is not 12 bytes.\n *\n * @returns The decrypted data.\n */\nexport async function aesGCMDecrypt(\n  encryptedData: Uint8Array,\n  key: Uint8Array,\n  iv: Uint8Array\n): Promise<Uint8Array> {\n  if (key.length !== KEY_SIZE_BYTES) {\n    throw new Error(`key must be ${KEY_SIZE_BYTES} bytes`)\n  }\n  if (iv.length !== IV_SIZE_BYTES) {\n    throw new Error(`iv must be ${IV_SIZE_BYTES} bytes`)\n  }\n  if (isNode()) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const crypto = require('crypto')\n    encryptedData = Buffer.from(encryptedData)\n    const decipher = crypto.createDecipheriv('aes-256-gcm', key, iv)\n    decipher.setAuthTag(\n      encryptedData.slice(encryptedData.length - AUTH_TAG_SIZE_BYTES)\n    )\n    const decrypted = Buffer.concat([\n      decipher.update(\n        encryptedData.slice(0, encryptedData.length - AUTH_TAG_SIZE_BYTES)\n      ),\n      decipher.final(),\n    ])\n    return decrypted\n  }\n\n  const keyData = await window.crypto.subtle.importKey(\n    'raw',\n    key,\n    { name: 'AES-GCM' },\n    false,\n    ['decrypt']\n  )\n  const decrypted = await window.crypto.subtle.decrypt(\n    { name: 'AES-GCM', iv: iv },\n    keyData,\n    encryptedData\n  )\n  return Buffer.from(decrypted)\n}\n"]}