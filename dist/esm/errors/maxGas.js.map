{"version":3,"file":"maxGas.js","sourceRoot":"","sources":["../../../src/errors/maxGas.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAA;AAClC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAA;AAQ1C;;GAEG;AACH,MAAM,OAAO,WAAY,SAAQ,SAAS;IACxC;;OAEG;IACM,IAAI,GAAG,aAAa,CAAA;IAE7B;;;;;OAKG;IACH,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAyB;QAC5D,KAAK,CACH,uCAAuC,QAAQ,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,mBAAmB,cAAc,MAAM,GAAG,EACxH;YACE,IAAI,EAAE,UAAU,CAAC,WAAW;YAC5B,KAAK;SACN,CACF,CAAA;IACH,CAAC;CACF","sourcesContent":["import { ErrorBase } from './base'\nimport { ErrorCodes } from './utils/codes'\n\ntype ErrorMaxGasParameters = {\n  isHigher: boolean\n  amount: bigint\n  cause?: Error\n}\n\n/**\n * Error class for handling gas limit errors related to operations, whether exceeding max or falling below min allowed limits.\n */\nexport class ErrorMaxGas extends ErrorBase {\n  /**\n   * Override the name to clearly identify this as a ErrorMaxGas.\n   */\n  override name = 'ErrorMaxGas'\n\n  /**\n   * Constructs a ErrorMaxGas with a message indicating whether the gas limit was exceeded or insufficient.\n   * @param isHigher - Boolean indicating if the actual gas used was higher than allowed (true) or lower (false).\n   * @param amount - The critical amount of gas that was either exceeded or not reached.\n   * @param cause - Optional cause of the error for deeper error chaining.\n   */\n  constructor({ isHigher, amount, cause }: ErrorMaxGasParameters) {\n    super(\n      `The gas limit for the operation was ${isHigher ? 'higher than the maximum' : 'below the minimum'} amount of ${amount}.`,\n      {\n        code: ErrorCodes.MaxGasLimit,\n        cause,\n      }\n    )\n  }\n}\n"]}