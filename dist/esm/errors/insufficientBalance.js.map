{"version":3,"file":"insufficientBalance.js","sourceRoot":"","sources":["../../../src/errors/insufficientBalance.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAA;AAClC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAA;AAQ1C;;GAEG;AACH,MAAM,OAAO,wBAAyB,SAAQ,SAAS;IACrD;;OAEG;IACM,IAAI,GAAG,0BAA0B,CAAA;IAE1C;;;;;OAKG;IACH,YAAY,EACV,WAAW,EACX,aAAa,EACb,KAAK,GACyB;QAC9B,KAAK,CACH,oDAAoD,WAAW,mBAAmB,aAAa,uBAAuB,EACtH;YACE,IAAI,EAAE,UAAU,CAAC,mBAAmB;YACpC,KAAK;SACN,CACF,CAAA;IACH,CAAC;CACF","sourcesContent":["import { ErrorBase } from './base'\nimport { ErrorCodes } from './utils/codes'\n\ntype InsufficientBalanceParameters = {\n  userBalance: bigint\n  neededBalance: bigint\n  cause?: Error\n}\n\n/**\n * Error class for handling cases when a user's balance is insufficient for a specified operation.\n */\nexport class ErrorInsufficientBalance extends ErrorBase {\n  /**\n   * Explicitly sets the error name for easier identification in error handling processes.\n   */\n  override name = 'ErrorInsufficientBalance'\n\n  /**\n   * Constructs an ErrorInsufficientBalance with a detailed message about the shortage.\n   * @param userBalance - The current balance of the user in nanoMassa.\n   * @param neededBalance - The balance required to successfully perform the operation in nanoMassa.\n   * @param cause - Optional error object that triggered this error, useful for chaining errors.\n   */\n  constructor({\n    userBalance,\n    neededBalance,\n    cause,\n  }: InsufficientBalanceParameters) {\n    super(\n      `Insufficient balance for the operation. User has ${userBalance} nanoMassa, but ${neededBalance} nanoMassa is needed.`,\n      {\n        code: ErrorCodes.InsufficientBalance,\n        cause,\n      }\n    )\n  }\n}\n"]}