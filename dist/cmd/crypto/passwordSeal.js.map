{"version":3,"file":"passwordSeal.js","sourceRoot":"","sources":["../../../src/crypto/passwordSeal.ts"],"names":[],"mappings":"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","sourcesContent":["import Sealer from './interfaces/sealer'\nimport randomUint8Array from 'secure-random'\n\nimport {\n  PBKDF2Options,\n  aesGCMDecrypt,\n  aesGCMEncrypt,\n  pbkdf2,\n} from './cross-browser'\n\nconst KEY_SIZE_BYTES = 32\nconst NONCE_SIZE_BYTES = 12\nconst SALT_SIZE_BYTES = 16\nconst OWASP_ITERATIONS = 600000\n\nfunction createKey(password: string, salt: Buffer): Promise<Uint8Array> {\n  const opts: PBKDF2Options = {\n    iterations: OWASP_ITERATIONS,\n    keyLength: KEY_SIZE_BYTES,\n    hash: 'sha256',\n  }\n  return pbkdf2(password, salt, opts)\n}\n\n/**\n * Password-based implementation of the Sealer interface.\n */\nexport class PasswordSeal implements Sealer {\n  private password: string\n  public salt: Uint8Array\n  public nonce: Uint8Array\n\n  constructor(password: string, salt?: Uint8Array, nonce?: Uint8Array) {\n    this.salt = salt ?? randomUint8Array(SALT_SIZE_BYTES)\n    this.nonce = nonce ?? randomUint8Array(NONCE_SIZE_BYTES)\n    this.validate()\n\n    this.password = password\n  }\n\n  private validate(): void {\n    if (!this.salt || this.salt.length !== SALT_SIZE_BYTES) {\n      throw new Error(`Salt must be ${SALT_SIZE_BYTES} bytes`)\n    }\n    if (!this.nonce || this.nonce.length !== NONCE_SIZE_BYTES) {\n      throw new Error(`Nonce must be ${NONCE_SIZE_BYTES} bytes`)\n    }\n  }\n\n  /**\n   * Seals data using password-based PKDF2 AES-256-GCM encryption.\n   *\n   * @param data - The data to encrypt.\n   *\n   * @returns Protected data.\n   */\n  async seal(data: Uint8Array): Promise<Uint8Array> {\n    this.validate()\n    const key = await createKey(this.password, Buffer.from(this.salt))\n    return aesGCMEncrypt(data, key, Buffer.from(this.nonce))\n  }\n\n  /**\n   * Unseals data using password-based PKDF2 AES-256-GCM decryption.\n   *\n   * @param data - The encrypted data.\n   *\n   * @returns Clear data.\n   */\n  async unseal(data: Uint8Array): Promise<Uint8Array> {\n    this.validate()\n    const key = await createKey(this.password, Buffer.from(this.salt))\n    return aesGCMDecrypt(data, key, Buffer.from(this.nonce))\n  }\n\n  /**\n   * Creates a Sealer from environment variables.\n   *\n   * @remarks\n   * The expected environment variables are:\n   * - PASSWORD,\n   * - SALT - base64 encoded, and\n   * - NONCE - base64 encoded.\n   *\n   * @returns A password-based sealer instance.\n   */\n  static fromEnv(): Sealer {\n    const pwd = process.env.PASSWORD\n    if (!pwd) {\n      throw new Error('Missing PASSWORD environment variable')\n    }\n    const salt = process.env.SALT\n      ? Uint8Array.from(Buffer.from(process.env.SALT, 'base64'))\n      : undefined\n    if (!salt) {\n      throw new Error('Missing base64 encoded SALT in .env file')\n    }\n    const nonce = process.env.NONCE\n      ? Uint8Array.from(Buffer.from(process.env.NONCE, 'base64'))\n      : undefined\n    if (!nonce) {\n      throw new Error('Missing base64 encoded NONCE in .env file')\n    }\n    return new PasswordSeal(pwd, salt, nonce)\n  }\n}\n"]}