{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/operation/types.ts"],"names":[],"mappings":";;;AAIA;;;;;;;;GAQG;AACH,IAAY,eA8BX;AA9BD,WAAY,eAAe;IACzB;;OAEG;IACH,6DAAQ,CAAA;IAER;;OAEG;IACH,6EAAgB,CAAA;IAEhB;;OAEG;IACH,iFAAkB,CAAA;IAElB;;OAEG;IACH,6EAAgB,CAAA;IAEhB;;OAEG;IACH,2DAAO,CAAA;IAEP;;OAEG;IACH,uDAAK,CAAA;AACP,CAAC,EA9BW,eAAe,+BAAf,eAAe,QA8B1B;AAED;;;;;GAKG;AACH,IAAY,aAMX;AAND,WAAY,aAAa;IACvB,+DAAW,CAAA;IACX,uDAAO,CAAA;IACP,yDAAQ,CAAA;IACR,iGAA4B,CAAA;IAC5B,2FAAyB,CAAA;AAC3B,CAAC,EANW,aAAa,6BAAb,aAAa,QAMxB","sourcesContent":["import { Address } from '../basicElements'\nimport { Mas } from '../basicElements/mas'\nimport { U64 } from '../basicElements/serializers/number/u64'\n\n/**\n * Operation status.\n *\n * @remarks\n * This enumeration captures the lifecycle stages of a blockchain operation, from initiation to finalization.\n *\n * @privateRemarks\n * Keeps the order of the stages in the lifecycle as it is used by the wait method.\n */\nexport enum OperationStatus {\n  /**\n   * The operation has not been found within the blockchain, either because it is not yet processed or does not exist.\n   */\n  NotFound,\n\n  /**\n   * The operation has been recognized and is awaiting inclusion in the blockchain ledger.\n   */\n  PendingInclusion,\n\n  /**\n   * The operation has executed successfully; however, the block containing it has not yet been confirmed as final.\n   */\n  SpeculativeSuccess,\n\n  /**\n   * The operation has failed; however, the block containing the failure has not yet been confirmed as final.\n   */\n  SpeculativeError,\n\n  /**\n   * The operation has executed successfully and the block containing it has been confirmed as final.\n   */\n  Success,\n\n  /**\n   * The operation has failed and the block containing the failure has been confirmed as final.\n   */\n  Error,\n}\n\n/**\n * Operation types.\n *\n * @remarks\n * The corresponding values are fixed by the node.\n */\nexport enum OperationType {\n  Transaction,\n  RollBuy,\n  RollSell,\n  ExecuteSmartContractBytecode,\n  CallSmartContractFunction,\n}\n\n/**\n * Operation options.\n *\n * @remarks\n * Period to live is the number of periods the operation is valid for.\n * This value must be positive and if it's too big, the node will (silently?) reject the operation.\n *\n * If no fee is provided, minimal fee of connected node is used.\n * If no periodToLive is provided, the DefaultPeriodToLive is used.\n */\nexport type OperationOptions = {\n  fee?: U64\n  periodToLive?: number\n}\n\nexport type BaseOperation = {\n  fee: U64\n  expirePeriod: number\n  type: OperationType\n}\n\nexport type RollOperation = BaseOperation & {\n  type: OperationType.RollBuy | OperationType.RollSell\n  amount: U64\n}\n\nexport type TransferOperation = BaseOperation & {\n  type: OperationType.Transaction\n  amount: U64\n  recipientAddress: Address\n}\n\nexport type BaseSmartContractOperation = BaseOperation & {\n  maxGas: U64\n  coins: U64\n}\n\nexport type CallOperation = BaseSmartContractOperation & {\n  type: OperationType.CallSmartContractFunction\n  address: string\n  func: string\n  parameter: Uint8Array\n}\n\nexport type ReadOnlyParams = {\n  parameter: Uint8Array\n  coins?: Mas\n  fee?: Mas\n  maxGas?: U64\n  func: string\n  target: string\n  caller: string\n}\n\n// @see https://docs.massa.net/docs/learn/operation-format-execution#executesc-operation-payload\nexport type ExecuteOperation = BaseOperation & {\n  maxGas: U64\n  maxCoins: U64\n  type: OperationType.ExecuteSmartContractBytecode\n  contractDataBinary: Uint8Array\n  datastore?: Map<Uint8Array, Uint8Array>\n}\n\nexport type OperationDetails =\n  | RollOperation\n  | TransferOperation\n  | CallOperation\n  | ExecuteOperation\n"]}