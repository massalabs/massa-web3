{"version":3,"file":"operationManager.js","sourceRoot":"","sources":["../../../src/operation/operationManager.ts"],"names":[],"mappings":";;;;AAAA,sEAA+C;AAC/C,sDAAkD;AAIlD,4DAA2B;AAC3B,8DAAkD;AAClD,mCAQgB;AAEH,QAAA,sBAAsB,GAAG,CAAC,CAAA;AAC1B,QAAA,kBAAkB,GAAG,CAAC,CAAA;AACtB,QAAA,kBAAkB,GAAG,CAAC,CAAA;AAEnC;;GAEG;AACH,MAAa,gBAAgB;IAElB;IACA;IAFT,YACS,UAAsB,EACtB,gBAA4B;QAD5B,eAAU,GAAV,UAAU,CAAY;QACtB,qBAAgB,GAAhB,gBAAgB,CAAY;IAClC,CAAC;IAEJ;;;;;;OAMG;IACH,MAAM,CAAC,SAAS,CAAC,SAA2B;QAC1C,MAAM,UAAU,GAAG;YACjB,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;YAC9B,gBAAM,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC;YACrC,gBAAM,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC;SAC9B,CAAA;QAED,QAAQ,SAAS,CAAC,IAAI,EAAE,CAAC;YACvB,KAAK,qBAAa,CAAC,WAAW;gBAC5B,SAAS,GAAG,SAA8B,CAAA;gBAC1C,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAA;gBACrD,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;gBAClD,MAAK;YACP,KAAK,qBAAa,CAAC,OAAO,CAAC;YAC3B,KAAK,qBAAa,CAAC,QAAQ;gBACzB,SAAS,GAAG,SAA0B,CAAA;gBACtC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;gBAClD,MAAK;YACP,KAAK,qBAAa,CAAC,yBAAyB;gBAC1C,6FAA6F;gBAC7F,SAAS,GAAG,SAA0B,CAAA;gBACtC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;gBAClD,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAA;gBACjD,UAAU,CAAC,IAAI,CAAC,iBAAO,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;gBAChE,UAAU,CAAC,IAAI,CAAC,gBAAM,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;gBACrD,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;gBAC5C,UAAU,CAAC,IAAI,CAAC,gBAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;gBAC1D,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;gBACpC,MAAK;YACP,KAAK,qBAAa,CAAC,4BAA4B;gBAC7C,SAAS,GAAG,SAA6B,CAAA;gBACzC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAA;gBAClD,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAA;gBACpD,UAAU,CAAC,IAAI,CACb,QAAQ,CAAC,MAAM,CAAC,iBAAG,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CACrE,CAAA;gBACD,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAA;gBAE7C,SAAS,CAAC,SAAS;oBACjB,SAAS,CAAC,SAAS,IAAI,IAAI,GAAG,EAA0B,CAAA;gBAC1D,UAAU,CAAC,IAAI,CACb,QAAQ,CAAC,MAAM,CAAC,iBAAG,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAC1D,CAAA;gBAED,2CAA2C;gBAC3C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,SAAS,CAAC,SAAS,EAAE,CAAC;oBAC/C,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;oBACjC,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,iBAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAA;oBAC/D,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;oBACrC,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,iBAAG,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAA;oBACnE,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAA;gBACzD,CAAC;gBACD,MAAK;YACP;gBACE,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAA;QACnD,CAAC;QAED,OAAO,UAAU,CAAC,IAAI,CACpB,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CACzD,CAAA;IACH,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,WAAW,CAAC,IAAgB;QACjC,IAAI,MAAM,GAAG,CAAC,CAAA;QAEd,sCAAsC;QACtC,MAAM,UAAU,GAAG,GAAW,EAAE;YAC9B,MAAM,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;YAC3C,MAAM,IAAI,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YACxC,OAAO,KAAK,CAAA;QACd,CAAC,CAAA;QAED,MAAM,gBAAgB,GAAkB;YACtC,GAAG,EAAE,UAAU,EAAE;YACjB,YAAY,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC;YAClC,IAAI,EAAE,MAAM,CAAC,UAAU,EAAE,CAAC;SAC3B,CAAA;QAED,QAAQ,gBAAgB,CAAC,IAAI,EAAE,CAAC;YAC9B,KAAK,qBAAa,CAAC,WAAW,CAAC,CAAC,CAAC;gBAC/B,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,iBAAO,CAAC,iBAAiB,CAC3D,IAAI,EACJ,MAAM,CACP,CAAA;gBACD,MAAM,gBAAgB,GAAG,iBAAO,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;gBACrD,MAAM,IAAI,MAAM,CAAA;gBAChB,OAAO;oBACL,GAAG,gBAAgB;oBACnB,gBAAgB;oBAChB,MAAM,EAAE,UAAU,EAAE;iBACA,CAAA;YACxB,CAAC;YACD,KAAK,qBAAa,CAAC,OAAO,CAAC;YAC3B,KAAK,qBAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC5B,OAAO;oBACL,GAAG,gBAAgB;oBACnB,MAAM,EAAE,UAAU,EAAE;iBACJ,CAAA;YACpB,CAAC;YACD;gBACE,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAA;QACnD,CAAC;IACH,CAAC;IAED;;;;;;;;OAQG;IACH,MAAM,CAAC,YAAY,CACjB,OAAe,EACf,SAA2B,EAC3B,GAAc;QAEd,8BAA8B;QAC9B,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,iBAAG,CAAC,SAAS,CAAC,CAAA;QAC/C,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QAC3C,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,CAAA;QAEpC,MAAM,IAAI,GAAG,gBAAgB,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;QAClD,MAAM,cAAc,GAAG,GAAG,CAAC,OAAO,EAAE,CAAA;QACpC,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,SAAS,EAAE,GAAG,cAAc,EAAE,GAAG,IAAI,CAAC,CAAC,CAAA;IACpE,CAAC;IAED;;;;;;;;;;OAUG;IACH,KAAK,CAAC,IAAI,CAAC,OAAe,EAAE,SAA2B;QACrD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CACzB,gBAAgB,CAAC,YAAY,CAC3B,OAAO,EACP,SAAS,EACT,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CACrC,CACF,CAAA;IACH,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,IAAI,CAAC,SAA2B;QACpC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAA;QACrE,CAAC;QACD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAA;QACxD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;QACrD,MAAM,IAAI,GAAG,gBAAgB,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;QAClD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAA;QAEtD,OAAO,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC;YACzC,IAAI;YACJ,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE;YAC/B,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE;SAChC,CAAC,CAAA;IACJ,CAAC;CACF;AA/LD,4CA+LC;AAED;;;;;;;;;;;GAWG;AACH,SAAgB,iBAAiB,CAAC,YAAY,GAAG,8BAAsB;IACrE,IAAI,YAAY,GAAG,0BAAkB,IAAI,YAAY,GAAG,0BAAkB,EAAE,CAAC;QAC3E,MAAM,IAAI,KAAK,CACb,gCAAgC,0BAAkB,QAAQ,0BAAkB,GAAG,CAChF,CAAA;IACH,CAAC;AACH,CAAC;AAND,8CAMC;AAEM,KAAK,UAAU,uBAAuB,CAC3C,MAAiB,EACjB,YAAY,GAAG,8BAAsB;IAErC,iBAAiB,CAAC,YAAY,CAAC,CAAA;IAC/B,MAAM,aAAa,GAAG,MAAM,MAAM,CAAC,WAAW,EAAE,CAAA;IAChD,OAAO,aAAa,GAAG,YAAY,CAAA;AACrC,CAAC;AAPD,0DAOC","sourcesContent":["import * as unsigned from '../utils/big-varint'\nimport { Address } from '../basicElements/address'\nimport { PrivateKey, PublicKey } from '../basicElements/keys'\nimport { PublicAPI } from '../client'\nimport { Signature } from '../basicElements/signature'\nimport varint from 'varint'\nimport { U64 } from '../basicElements/serializers'\nimport {\n  BaseOperation,\n  CallOperation,\n  ExecuteOperation,\n  OperationDetails,\n  OperationType,\n  RollOperation,\n  TransferOperation,\n} from './types'\n\nexport const PERIOD_TO_LIVE_DEFAULT = 9\nexport const PERIOD_TO_LIVE_MAX = 9\nexport const PERIOD_TO_LIVE_MIN = 1\n\n/*\n * A class regrouping operation functions.\n */\nexport class OperationManager {\n  constructor(\n    public privateKey: PrivateKey,\n    public blockchainClient?: PublicAPI\n  ) {}\n\n  /**\n   * Serializes an operation according to the Massa protocol.\n   *\n   * @param operation - The operation to serialize.\n   *\n   * @returns A byte array representing the serialized operation.\n   */\n  static serialize(operation: OperationDetails): Uint8Array {\n    const components = [\n      unsigned.encode(operation.fee),\n      varint.encode(operation.expirePeriod),\n      varint.encode(operation.type),\n    ]\n\n    switch (operation.type) {\n      case OperationType.Transaction:\n        operation = operation as TransferOperation\n        components.push(operation.recipientAddress.toBytes())\n        components.push(unsigned.encode(operation.amount))\n        break\n      case OperationType.RollBuy:\n      case OperationType.RollSell:\n        operation = operation as RollOperation\n        components.push(unsigned.encode(operation.amount))\n        break\n      case OperationType.CallSmartContractFunction:\n        // @see https://docs.massa.net/docs/learn/operation-format-execution#callsc-operation-payload\n        operation = operation as CallOperation\n        components.push(unsigned.encode(operation.maxGas))\n        components.push(unsigned.encode(operation.coins))\n        components.push(Address.fromString(operation.address).toBytes())\n        components.push(varint.encode(operation.func.length))\n        components.push(Buffer.from(operation.func))\n        components.push(varint.encode(operation.parameter.length))\n        components.push(operation.parameter)\n        break\n      case OperationType.ExecuteSmartContractBytecode:\n        operation = operation as ExecuteOperation\n        components.push(unsigned.encode(operation.maxGas))\n        components.push(unsigned.encode(operation.maxCoins))\n        components.push(\n          unsigned.encode(U64.fromNumber(operation.contractDataBinary.length))\n        )\n        components.push(operation.contractDataBinary)\n\n        operation.datastore =\n          operation.datastore || new Map<Uint8Array, Uint8Array>()\n        components.push(\n          unsigned.encode(U64.fromNumber(operation.datastore.size))\n        )\n\n        // length prefixed key-value pairs encoding\n        for (const [key, value] of operation.datastore) {\n          const keyBytes = Buffer.from(key)\n          const keyLen = unsigned.encode(U64.fromNumber(keyBytes.length))\n          const valueBytes = Buffer.from(value)\n          const valueLen = unsigned.encode(U64.fromNumber(valueBytes.length))\n          components.push(keyLen, keyBytes, valueLen, valueBytes)\n        }\n        break\n      default:\n        throw new Error('Operation type not supported')\n    }\n\n    return Uint8Array.from(\n      components.flatMap((component) => Array.from(component))\n    )\n  }\n\n  /**\n   * Deserializes an operation according to the Massa protocol.\n   *\n   * @param data - The byte array to deserialize.\n   *\n   * @returns An new instance of OperationDetails representing the deserialized operation.\n   */\n  static deserialize(data: Uint8Array): OperationDetails {\n    let offset = 0\n\n    // eslint-disable-next-line func-style\n    const nextVarInt = (): bigint => {\n      const value = unsigned.decode(data, offset)\n      offset += unsigned.encodingLength(value)\n      return value\n    }\n\n    const operationDetails: BaseOperation = {\n      fee: nextVarInt(),\n      expirePeriod: Number(nextVarInt()),\n      type: Number(nextVarInt()),\n    }\n\n    switch (operationDetails.type) {\n      case OperationType.Transaction: {\n        const { data: addrBytes, length } = Address.extractFromBuffer(\n          data,\n          offset\n        )\n        const recipientAddress = Address.fromBytes(addrBytes)\n        offset += length\n        return {\n          ...operationDetails,\n          recipientAddress,\n          amount: nextVarInt(),\n        } as TransferOperation\n      }\n      case OperationType.RollBuy:\n      case OperationType.RollSell: {\n        return {\n          ...operationDetails,\n          amount: nextVarInt(),\n        } as RollOperation\n      }\n      default:\n        throw new Error('Operation type not supported')\n    }\n  }\n\n  /**\n   * Formats an operation for signing.\n   *\n   * @param chainId - The identifier of the blockchain network.\n   * @param operation - The operation to sign.\n   * @param key - The public key to sign the operation with.\n   *\n   * @returns The formatted operation ready for signing.\n   */\n  static canonicalize(\n    chainId: bigint,\n    operation: OperationDetails,\n    key: PublicKey\n  ): Uint8Array {\n    // u64ToBytes is little endian\n    const networkId = new Uint8Array(U64.SIZE_BYTE)\n    const view = new DataView(networkId.buffer)\n    view.setBigUint64(0, chainId, false)\n\n    const data = OperationManager.serialize(operation)\n    const publicKeyBytes = key.toBytes()\n    return Uint8Array.from([...networkId, ...publicKeyBytes, ...data])\n  }\n\n  /**\n   * Signs an operation for a given network.\n   *\n   * @remarks\n   * The chainId is used to counter replay attacks on a different chain.\n   *\n   * @param chainId - The identifier of the blockchain network.\n   * @param operation - The operation to sign.\n   *\n   * @returns A signature of the operation.\n   */\n  async sign(chainId: bigint, operation: OperationDetails): Promise<Signature> {\n    return this.privateKey.sign(\n      OperationManager.canonicalize(\n        chainId,\n        operation,\n        await this.privateKey.getPublicKey()\n      )\n    )\n  }\n\n  /**\n   * Sends an operation to the blockchain.\n   *\n   * @param operation - The operation to send.\n   *\n   * @returns An operation Id.\n   */\n  async send(operation: OperationDetails): Promise<string> {\n    if (!this.blockchainClient) {\n      throw new Error('blockchainClient is mandatory to send operations')\n    }\n    const chainId = await this.blockchainClient.getChainId()\n    const signature = await this.sign(chainId, operation)\n    const data = OperationManager.serialize(operation)\n    const publicKey = await this.privateKey.getPublicKey()\n\n    return this.blockchainClient.sendOperation({\n      data,\n      publicKey: publicKey.toString(),\n      signature: signature.toString(),\n    })\n  }\n}\n\n/**\n * Check the expire period validity.\n *\n * @remarks\n * If the periodToLive is too big, the node will silently reject the operation.\n * This is why the periodToLive is limited to an upper value.\n *\n * @param periodToLive - The period to live.\n *\n * @returns The expire period.\n * @throws An error if the periodToLive is too low or too big.\n */\nexport function checkPeriodToLive(periodToLive = PERIOD_TO_LIVE_DEFAULT): void {\n  if (periodToLive < PERIOD_TO_LIVE_MIN || periodToLive > PERIOD_TO_LIVE_MAX) {\n    throw new Error(\n      `periodToLive must be between ${PERIOD_TO_LIVE_MIN} and ${PERIOD_TO_LIVE_MAX}.`\n    )\n  }\n}\n\nexport async function getAbsoluteExpirePeriod(\n  client: PublicAPI,\n  periodToLive = PERIOD_TO_LIVE_DEFAULT\n): Promise<number> {\n  checkPeriodToLive(periodToLive)\n  const currentPeriod = await client.fetchPeriod()\n  return currentPeriod + periodToLive\n}\n"]}