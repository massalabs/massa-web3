{"version":3,"file":"web3Provider.js","sourceRoot":"","sources":["../../../../src/provider/web3Provider/web3Provider.ts"],"names":[],"mappings":"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","sourcesContent":["// a Web3Provider is the combination of a clientAPI and an private key account\nimport {\n  CallSCParams,\n  DeploySCParams,\n  NodeStatusInfo,\n  Provider,\n  SignedData,\n} from '..'\nimport { SCProvider } from './smartContracts'\nimport {\n  Account,\n  Address,\n  CHAIN_ID,\n  EventFilter,\n  JsonRPCClient,\n  Network,\n  NetworkName,\n  PublicApiUrl,\n  SCEvent,\n  SmartContract,\n} from '../..'\nimport { Mas } from '../../basicElements/mas'\nimport {\n  Operation,\n  OperationStatus,\n  OperationType,\n  OperationOptions,\n  RollOperation,\n  TransferOperation,\n} from '../../operation'\nimport {\n  getAbsoluteExpirePeriod,\n  OperationManager,\n} from '../../operation/operationManager'\nimport { formatNodeStatusObject } from '../../client/formatObjects'\n\nexport class Web3Provider extends SCProvider implements Provider {\n  static fromRPCUrl(url: string, account: Account): Web3Provider {\n    return new Web3Provider(new JsonRPCClient(url), account)\n  }\n\n  static mainnet(account: Account): Web3Provider {\n    return Web3Provider.fromRPCUrl(PublicApiUrl.Mainnet, account)\n  }\n\n  static buildnet(account: Account): Web3Provider {\n    return Web3Provider.fromRPCUrl(PublicApiUrl.Buildnet, account)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  private readonly _providerName: string = 'Massa web3 provider'\n\n  get accountName(): string {\n    return this.account.address.toString()\n  }\n\n  get providerName(): string {\n    return this._providerName\n  }\n\n  get address(): string {\n    return this.account.address.toString()\n  }\n\n  async balance(final = true): Promise<bigint> {\n    return this.client.getBalance(this.address.toString(), final)\n  }\n\n  async networkInfos(): Promise<Network> {\n    const chainId = await this.client.getChainId()\n    let name = 'Unknown'\n    if (chainId === CHAIN_ID.Mainnet) {\n      name = NetworkName.Mainnet\n    } else if (chainId === CHAIN_ID.Buildnet) {\n      name = NetworkName.Buildnet\n    }\n\n    return {\n      name,\n      chainId,\n      url: this.client.connector.transport.uri,\n      minimalFee: await this.client.getMinimalFee(),\n    }\n  }\n\n  private async rollOperation(\n    type: OperationType,\n    amount: Mas,\n    opts?: OperationOptions\n  ): Promise<Operation> {\n    if (type !== OperationType.RollBuy && type !== OperationType.RollSell) {\n      throw new Error('Invalid roll operation type.')\n    }\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    if (amount <= 0) {\n      throw new Error('amount of rolls must be a positive non-zero value.')\n    }\n\n    const operation = new OperationManager(this.account.privateKey, this.client)\n    const details: RollOperation = {\n      fee: opts?.fee ?? (await this.client.getMinimalFee()),\n      expirePeriod: await getAbsoluteExpirePeriod(\n        this.client,\n        opts?.periodToLive\n      ),\n      type,\n      amount,\n    }\n    const operationId = await operation.send(details)\n    return new Operation(this, operationId)\n  }\n\n  /**\n   * Buys rolls.\n   *\n   * @param amount - The number of rolls to buy.\n   * @param opts - Optional operation details.\n   *\n   * @returns The ID of the operation.\n   * @throws If the amount of rolls is not a positive non-zero value.\n   */\n  async buyRolls(amount: Mas, opts?: OperationOptions): Promise<Operation> {\n    return this.rollOperation(OperationType.RollBuy, amount, opts)\n  }\n\n  /**\n   * Sells rolls.\n   *\n   * @param amount - The number of rolls to sell.\n   * @param opts - Optional operation details.\n   *\n   * @returns The ID of the operation.\n   * @throws If the amount of rolls is not a positive non-zero value.\n   */\n  async sellRolls(amount: Mas, opts?: OperationOptions): Promise<Operation> {\n    return this.rollOperation(OperationType.RollSell, amount, opts)\n  }\n\n  /**\n   * Transfers tokens.\n   *\n   * @param to - The address of the recipient.\n   * @param amount - The amount of tokens to transfer.\n   * @param opts - Optional operation details.\n   *\n   * @returns The ID of the operation.\n   * @throws If the amount of tokens is not a positive non-zero value.\n   */\n  async transfer(\n    to: Address | string,\n    amount: Mas,\n    opts?: OperationOptions\n  ): Promise<Operation> {\n    // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    if (amount <= 0) {\n      throw new Error('amount to transfer must be a positive non-zero value.')\n    }\n\n    if (typeof to === 'string') {\n      to = Address.fromString(to)\n    }\n\n    const operation = new OperationManager(this.account.privateKey, this.client)\n    const details: TransferOperation = {\n      fee: opts?.fee ?? (await this.client.getMinimalFee()),\n      expirePeriod: await getAbsoluteExpirePeriod(\n        this.client,\n        opts?.periodToLive\n      ),\n      type: OperationType.Transaction,\n      amount,\n      recipientAddress: to,\n    }\n    const operationId = await operation.send(details)\n    return new Operation(this, operationId)\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public async sign(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    data: Buffer | Uint8Array | string\n  ): Promise<SignedData> {\n    throw new Error('not implemented')\n  }\n\n  public async callSC(params: CallSCParams): Promise<Operation> {\n    const operationId = await this.call(params)\n    return new Operation(this, operationId)\n  }\n\n  public async deploySC(params: DeploySCParams): Promise<SmartContract> {\n    const operationId = await this.deploy(params)\n\n    const operation = new Operation(this, operationId)\n    const deployedAddress = await operation.getDeployedAddress(\n      params.waitFinalExecution\n    )\n    return new SmartContract(this, deployedAddress)\n  }\n\n  public async getOperationStatus(opId: string): Promise<OperationStatus> {\n    return this.client.getOperationStatus(opId)\n  }\n\n  public async getEvents(filter: EventFilter): Promise<SCEvent[]> {\n    return this.client.getEvents(filter)\n  }\n\n  public async getNodeStatus(): Promise<NodeStatusInfo> {\n    const status = await this.client.status()\n    return formatNodeStatusObject(status)\n  }\n}\n"]}