{"version":3,"file":"interface.js","sourceRoot":"","sources":["../../../src/provider/interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Address, EventFilter, Network, SCEvent, SmartContract } from '..'\nimport { Mas } from '../basicElements/mas'\nimport { Operation, OperationOptions, OperationStatus } from '../operation'\nimport {\n  CallSCParams,\n  DeploySCParams,\n  ReadSCData,\n  ReadSCParams,\n  SignedData,\n  NodeStatusInfo,\n} from './'\n\n/**\n * Defines the expected structure for a provider.\n */\nexport type Provider = {\n  /** Retrieves the account's address. */\n  get address(): string\n\n  /** Retrieves the provider's name associated with the account. */\n  get accountName(): string\n\n  /** Retrieves the account's name. */\n  get providerName(): string\n\n  /** Initiates a balance retrieval request for the account. */\n  balance(final: boolean): Promise<bigint>\n  networkInfos(): Promise<Network>\n  sign(data: Buffer | Uint8Array | string): Promise<SignedData>\n  buyRolls(amount: Mas, opts?: OperationOptions): Promise<Operation>\n  sellRolls(amount: Mas, opts?: OperationOptions): Promise<Operation>\n  transfer(\n    to: Address | string,\n    amount: Mas,\n    opts?: OperationOptions\n  ): Promise<Operation>\n  callSC(params: CallSCParams): Promise<Operation>\n  readSC(params: ReadSCParams): Promise<ReadSCData>\n  deploySC(params: DeploySCParams): Promise<SmartContract>\n  getOperationStatus(opId: string): Promise<OperationStatus>\n  getEvents(filter: EventFilter): Promise<SCEvent[]>\n  getNodeStatus(): Promise<NodeStatusInfo>\n}\n"]}