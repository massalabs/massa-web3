{"version":3,"file":"big-varint.js","sourceRoot":"","sources":["../../../src/utils/big-varint.ts"],"names":[],"mappings":";;;AAAA,wDAAwD;AACxD,6JAA6J;AAC7J,MAAM,KAAK,GAAG,KAAK,CAAA;AAEnB,SAAgB,cAAc,CAAC,KAAa;IAC1C,IAAI,CAAC,GAAG,CAAC,CAAA;IAET,OAAO,KAAK,IAAI,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3B,KAAK,KAAK,EAAE,CAAA;IACd,CAAC;IAED,OAAO,CAAC,GAAG,CAAC,CAAA;AACd,CAAC;AARD,wCAQC;AAED,SAAgB,MAAM,CACpB,CAAS,EACT,MAAoB,EACpB,UAAmB;IAEnB,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QACX,MAAM,IAAI,UAAU,CAAC,wBAAwB,CAAC,CAAA;IAChD,CAAC;IAED,MAAM,UAAU,GAAG,cAAc,CAAC,CAAC,CAAC,CAAA;IACpC,MAAM,GAAG,MAAM,IAAI,IAAI,WAAW,CAAC,UAAU,CAAC,CAAA;IAC9C,UAAU,GAAG,UAAU,IAAI,CAAC,CAAA;IAC5B,IAAI,MAAM,CAAC,UAAU,GAAG,UAAU,GAAG,UAAU,EAAE,CAAC;QAChD,MAAM,IAAI,UAAU,CAClB,4DAA4D,CAC7D,CAAA;IACH,CAAC;IAED,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;IAEhD,IAAI,MAAM,GAAG,CAAC,CAAA;IACd,OAAO,KAAK,GAAG,CAAC,EAAE,CAAC;QACjB,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,IAAI,CAAA;QAC1C,CAAC,KAAK,EAAE,CAAA;IACV,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;IAEzB,OAAO,KAAK,CAAA;AACd,CAAC;AA7BD,wBA6BC;AAED,SAAgB,MAAM,CAAC,IAAgB,EAAE,MAAM,GAAG,CAAC;IACjD,IAAI,CAAC,GAAG,EAAE,CAAA;IACV,IAAI,CAAC,GAAG,CAAC,CAAA;IACT,IAAI,CAAS,CAAA;IACb,GAAG,CAAC;QACF,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QACpB,IAAI,CAAC,KAAK,SAAS,EAAE,CAAC;YACpB,MAAM,IAAI,UAAU,CAAC,qBAAqB,CAAC,CAAA;QAC7C,CAAC;QAED,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;QACtC,CAAC,EAAE,CAAA;IACL,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAC;IACnB,OAAO,CAAC,CAAA;AACV,CAAC;AAdD,wBAcC","sourcesContent":["/* eslint-disable @typescript-eslint/no-magic-numbers */\n// This code was taken from the lib big-varint. https://github.com/joeltg/big-varint/blob/65346e5688245b20f05e5ce2dd8c784eb3ae3e15/src/unsigned.ts#L1C1-L58C2\nconst LIMIT = 0x7fn\n\nexport function encodingLength(value: bigint): number {\n  let i = 0\n\n  for (; value >= 0x80n; i++) {\n    value >>= 7n\n  }\n\n  return i + 1\n}\n\nexport function encode(\n  i: bigint,\n  buffer?: ArrayBuffer,\n  byteOffset?: number\n): Uint8Array {\n  if (i < 0n) {\n    throw new RangeError('value must be unsigned')\n  }\n\n  const byteLength = encodingLength(i)\n  buffer = buffer || new ArrayBuffer(byteLength)\n  byteOffset = byteOffset || 0\n  if (buffer.byteLength < byteOffset + byteLength) {\n    throw new RangeError(\n      'the buffer is too small to encode the number at the offset'\n    )\n  }\n\n  const array = new Uint8Array(buffer, byteOffset)\n\n  let offset = 0\n  while (LIMIT < i) {\n    array[offset++] = Number(i & LIMIT) | 0x80\n    i >>= 7n\n  }\n\n  array[offset] = Number(i)\n\n  return array\n}\n\nexport function decode(data: Uint8Array, offset = 0): bigint {\n  let i = 0n\n  let n = 0\n  let b: number\n  do {\n    b = data[offset + n]\n    if (b === undefined) {\n      throw new RangeError('offset out of range')\n    }\n\n    i += BigInt(b & 0x7f) << BigInt(n * 7)\n    n++\n  } while (0x80 <= b)\n  return i\n}\n"]}