{"version":3,"file":"publicAPI.js","sourceRoot":"","sources":["../../../src/client/publicAPI.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention, @typescript-eslint/no-non-null-assertion */\n\nimport { Mas, strToBytes } from '../basicElements'\nimport {\n  SendOperationInput,\n  EventFilter as EvtFilter,\n  ReadOnlyCallResult,\n  TransportOptions,\n  Transport,\n  ClientOptions,\n  DatastoreEntry,\n} from '.'\nimport {\n  OperationInput,\n  Pagination,\n  DatastoreEntryOutput,\n  ExecuteReadOnlyResponse,\n  MassaOpenRPCSpecification,\n  ReadOnlyCall,\n  ReadOnlyBytecodeExecution,\n  AddressInfo,\n  Block,\n  BlockId,\n  BlockInfo,\n  Clique,\n  Transfer,\n  Slot,\n  EndorsementInfo,\n  GraphInterval,\n  NodeStatus,\n  OperationInfo,\n  SCOutputEvent,\n  Staker,\n  OperationId,\n  AddressFilter,\n} from '../generated/client'\nimport { MAX_GAS_CALL } from '../smartContracts'\nimport { OperationStatus, ReadOnlyParams } from '../operation'\nimport { DEFAULT_RETRY_OPTS, withRetry } from './retry'\nimport isEqual from 'lodash.isequal'\n\nexport class PublicAPI {\n  connector: MassaOpenRPCSpecification\n  lastStatus: NodeStatus\n\n  // eslint-disable-next-line max-params\n  constructor(\n    transport: Transport,\n    host: string,\n    port: number,\n    opts: TransportOptions = {},\n    public options: Partial<ClientOptions> = {}\n  ) {\n    this.connector = new MassaOpenRPCSpecification({\n      transport: {\n        type: transport,\n        host,\n        port,\n        path: opts.path,\n        protocol: opts.protocol,\n      },\n    })\n    if (!this.options.retry) {\n      this.options.retry = DEFAULT_RETRY_OPTS\n    }\n  }\n\n  async executeReadOnlyBytecode(\n    readOnlyBytecodeExecution: ReadOnlyBytecodeExecution\n  ): Promise<ExecuteReadOnlyResponse> {\n    return withRetry(\n      () =>\n        this.connector.execute_read_only_bytecode([readOnlyBytecodeExecution]),\n      this.options.retry!\n    ).then((r) => r[0])\n  }\n\n  async executeMultipleReadOnlyBytecode(\n    readOnlyBytecodeExecutions: ReadOnlyBytecodeExecution[]\n  ): Promise<ExecuteReadOnlyResponse[]> {\n    return withRetry(\n      () =>\n        this.connector.execute_read_only_bytecode(readOnlyBytecodeExecutions),\n      this.options.retry!\n    )\n  }\n\n  async executeReadOnlyCall(\n    params: ReadOnlyParams\n  ): Promise<ReadOnlyCallResult> {\n    const [res] = await withRetry(\n      () =>\n        this.connector.execute_read_only_call([\n          {\n            max_gas: Number(params.maxGas ?? MAX_GAS_CALL),\n            target_address: params.target,\n            target_function: params.func,\n            parameter: Array.from(params.parameter),\n            caller_address: params.caller,\n            coins: params.coins ? Mas.toString(params.coins) : null,\n            fee: params.fee ? Mas.toString(params.fee) : null,\n          },\n        ]),\n      this.options.retry!\n    )\n\n    if (!res) {\n      throw new Error('No result returned from execute_read_only_call')\n    }\n\n    return {\n      // @ts-expect-error - wrong type returned by the API interface\n      value: new Uint8Array(res.result.Ok),\n      info: {\n        gasCost: res.gas_cost,\n        error: res.result.Error,\n        events: res.output_events,\n        stateChanges: {\n          ledgerChanges: res.state_changes.ledger_changes,\n          asyncPoolChanges: res.state_changes.async_pool_changes,\n          posChanges: res.state_changes.pos_changes,\n          executedOpsChanges: res.state_changes.executed_ops_changes,\n          executedDenunciationsChanges:\n            res.state_changes.executed_denunciations_changes,\n          executionTrailHashChange:\n            res.state_changes.execution_trail_hash_change,\n        },\n      },\n    }\n  }\n\n  async executeMultipleReadOnlyCall(\n    readOnlyCalls: ReadOnlyCall[]\n  ): Promise<ExecuteReadOnlyResponse[]> {\n    return withRetry(\n      () => this.connector.execute_read_only_call(readOnlyCalls),\n      this.options.retry!\n    )\n  }\n\n  async getAddressInfo(address: string): Promise<AddressInfo> {\n    return this.getMultipleAddressInfo([address]).then((r) => r[0])\n  }\n\n  async getBalance(address: string, final = true): Promise<Mas.Mas> {\n    return this.getAddressInfo(address).then((r) => {\n      return Mas.fromString(final ? r.final_balance : r.candidate_balance)\n    })\n  }\n\n  async getMultipleAddressInfo(addresses: string[]): Promise<AddressInfo[]> {\n    return withRetry(\n      () => this.connector.get_addresses(addresses),\n      this.options.retry!\n    )\n  }\n\n  async getAddressesBytecode(addressFilter: AddressFilter): Promise<string> {\n    return withRetry(\n      () => this.connector.get_addresses_bytecode([addressFilter]),\n      this.options.retry!\n    ).then((r) => r[0])\n  }\n\n  async executeMultipleGetAddressesBytecode(\n    addressFilters: AddressFilter[]\n  ): Promise<string[]> {\n    return withRetry(\n      () => this.connector.get_addresses_bytecode(addressFilters),\n      this.options.retry!\n    )\n  }\n\n  async getBlock(blockId: BlockId): Promise<BlockInfo> {\n    return withRetry(\n      () => this.connector.get_blocks([blockId]),\n      this.options.retry!\n    ).then((r) => r[0])\n  }\n\n  // todo should return an array of blockInfo, right?\n  async getMultipleBlocks(blockIds: BlockId[]): Promise<BlockInfo[]> {\n    return withRetry(\n      () => this.connector.get_blocks(blockIds),\n      this.options.retry!\n    )\n  }\n\n  async getBlockcliqueBlock(slot: Slot): Promise<Block> {\n    return withRetry(\n      () => this.connector.get_blockclique_block_by_slot(slot),\n      this.options.retry!\n    )\n  }\n\n  async getCliques(): Promise<Clique[]> {\n    return withRetry(() => this.connector.get_cliques(), this.options.retry!)\n  }\n\n  async getDataStoreKeys(\n    contract: string,\n    filter: Uint8Array = new Uint8Array(),\n    final = true\n  ): Promise<Uint8Array[]> {\n    const addrInfo = await this.getAddressInfo(contract)\n    const keys = final\n      ? addrInfo.final_datastore_keys\n      : addrInfo.candidate_datastore_keys\n    return keys\n      .filter(\n        (key) =>\n          !filter.length ||\n          isEqual(Uint8Array.from(key.slice(0, filter.length)), filter)\n      )\n      .map((key) => Uint8Array.from(key))\n  }\n\n  async getDatastoreEntries(\n    inputs: DatastoreEntry[],\n    final = true\n  ): Promise<Uint8Array[]> {\n    const entriesQuery = inputs.map((entry) => {\n      const byteKey: Uint8Array =\n        typeof entry.key === 'string' ? strToBytes(entry.key) : entry.key\n      return {\n        key: Array.from(byteKey),\n        address: entry.address,\n      }\n    })\n    const res = await withRetry(\n      () => this.connector.get_datastore_entries(entriesQuery),\n      this.options.retry!\n    )\n\n    return res.map((r: DatastoreEntryOutput) =>\n      Uint8Array.from(final ? r.final_value : r.candidate_value)\n    )\n  }\n\n  async getDatastoreEntry(\n    key: string | Uint8Array,\n    address: string,\n    final = true\n  ): Promise<Uint8Array> {\n    return this.getDatastoreEntries([{ key, address }], final).then((r) => r[0])\n  }\n\n  async getSlotTransfers(slot: Slot): Promise<Transfer[]> {\n    return withRetry(\n      () => this.connector.get_slots_transfers([slot]),\n      this.options.retry!\n    ).then((r) => r[0])\n  }\n\n  async getMultipleSlotTransfers(slots: Slot[]): Promise<Transfer[][]> {\n    return withRetry(\n      () => this.connector.get_slots_transfers(slots),\n      this.options.retry!\n    )\n  }\n\n  async getEndorsement(endorsementId: string): Promise<EndorsementInfo> {\n    return this.getMultipleEndorsements([endorsementId]).then((r) => r[0])\n  }\n\n  async getMultipleEndorsements(\n    endorsementIds: string[]\n  ): Promise<EndorsementInfo[]> {\n    return withRetry(\n      () => this.connector.get_endorsements(endorsementIds),\n      this.options.retry!\n    )\n  }\n\n  async getEvents(filter: EvtFilter): Promise<SCOutputEvent[]> {\n    const formattedFilter = {\n      start: filter.start,\n      end: filter.end,\n      emitter_address: filter.smartContractAddress,\n      original_caller_address: filter.callerAddress,\n      original_operation_id: filter.operationId,\n      is_final: filter.isFinal,\n      is_error: filter.isError,\n    }\n\n    return withRetry(\n      () => this.connector.get_filtered_sc_output_event(formattedFilter),\n      this.options.retry!\n    )\n  }\n\n  async getGraphInterval(\n    start?: number,\n    end?: number\n  ): Promise<GraphInterval[]> {\n    return withRetry(\n      () => this.connector.get_graph_interval({ start, end }),\n      this.options.retry!\n    )\n  }\n\n  async getOperations(operationIds: string[]): Promise<OperationInfo[]> {\n    return withRetry(\n      () => this.connector.get_operations(operationIds),\n      this.options.retry!\n    )\n  }\n\n  async getOperation(operationId: string): Promise<OperationInfo> {\n    return this.getOperations([operationId]).then((r) => r[0])\n  }\n\n  async getOperationStatus(operationId: string): Promise<OperationStatus> {\n    const op = await this.getOperation(operationId)\n\n    if (op.op_exec_status === null) {\n      if (op.is_operation_final === null) {\n        return OperationStatus.NotFound\n      }\n\n      throw new Error('unexpected status')\n    }\n\n    if (op.in_pool) {\n      return OperationStatus.PendingInclusion\n    }\n\n    if (!op.is_operation_final) {\n      return op.op_exec_status\n        ? OperationStatus.SpeculativeSuccess\n        : OperationStatus.SpeculativeError\n    }\n\n    return op.op_exec_status ? OperationStatus.Success : OperationStatus.Error\n  }\n\n  // todo rename PageRequest pagination\n  async getStakers(pagination: Pagination): Promise<Staker[]> {\n    return withRetry(\n      () => this.connector.get_stakers(pagination),\n      this.options.retry!\n    )\n  }\n\n  async status(): Promise<NodeStatus> {\n    this.lastStatus = await withRetry(\n      () => this.connector.get_status(),\n      this.options.retry!\n    )\n    return this.lastStatus\n  }\n\n  async getMinimalFee(): Promise<bigint> {\n    if (!this.lastStatus) {\n      await this.status()\n    }\n    if (!this.lastStatus.minimal_fees) {\n      throw new Error('minimal fees: not available')\n    }\n    return Mas.fromString(this.lastStatus.minimal_fees)\n  }\n\n  async getChainId(): Promise<bigint> {\n    if (!this.lastStatus) {\n      await this.status()\n    }\n    return BigInt(this.lastStatus.chain_id)\n  }\n\n  async fetchPeriod(): Promise<number> {\n    const status = await this.status()\n    if (!status.last_slot) {\n      throw new Error('last slot: not available')\n    }\n    return status.last_slot.period\n  }\n\n  async getCurrentSlot(): Promise<Slot> {\n    const { last_slot } = await this.status()\n    return last_slot\n  }\n\n  private static convertOperationInput(\n    data: SendOperationInput\n  ): OperationInput {\n    return {\n      serialized_content: Array.from(data.data),\n      creator_public_key: data.publicKey,\n      signature: data.signature,\n    }\n  }\n\n  async sendOperation(data: SendOperationInput): Promise<OperationId> {\n    return this.sendOperations([data]).then((r) => r[0])\n  }\n\n  async sendOperations(data: SendOperationInput[]): Promise<OperationId[]> {\n    return this.sendMultipleOperations(\n      data.map((e) => PublicAPI.convertOperationInput(e))\n    )\n  }\n\n  async sendMultipleOperations(data: OperationInput[]): Promise<OperationId[]> {\n    return withRetry(\n      () => this.connector.send_operations(data),\n      this.options.retry!\n    )\n  }\n}\n"]}