{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/basicElements/internal.ts"],"names":[],"mappings":";;;AAGA;;;;GAIG;AACH,SAAgB,WAAW,CACzB,UAAsB,EACtB,SAAoB,EACpB,IAAY,EACZ,eAAwB;IAExB,MAAM,GAAG,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;IACxC,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAC/D,IAAI,OAAO,KAAK,eAAe,EAAE,CAAC;QAChC,MAAM,IAAI,KAAK,CACb,oBAAoB,OAAO,KAAK,eAAe,gBAAgB,CAChE,CAAA;IACH,CAAC;IACD,OAAO,aAAa,CAAA;AACtB,CAAC;AAdD,kCAcC;AAED;;;;;;;GAOG;AACH,SAAgB,iBAAiB,CAAC,GAAW,EAAE,GAAG,QAAkB;IAClE,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;IAC/C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CACb,mBAAmB,MAAM,KAAK,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAC3G,CAAA;IACH,CAAC;IACD,OAAO,MAAM,CAAA;AACf,CAAC;AARD,8CAQC","sourcesContent":["import Serializer from '../crypto/interfaces/serializer'\nimport { Versioner, Version } from '../crypto/interfaces/versioner'\n\n/**\n * Deserialize a string data into non versioned bytes and checks that expected version match.\n *\n * @returns the extracted data.\n */\nexport function extractData(\n  serializer: Serializer,\n  versioner: Versioner,\n  data: string,\n  expectedVersion: Version\n): Uint8Array {\n  const raw = serializer.deserialize(data)\n  const { data: extractedData, version } = versioner.extract(raw)\n  if (version !== expectedVersion) {\n    throw new Error(\n      `invalid version: ${version}. ${expectedVersion} was expected.`\n    )\n  }\n  return extractedData\n}\n\n/**\n * Get the prefix of a string and validate it against the expected ones.\n *\n * @remarks\n * If several prefixes are expected, their length must be the same.\n *\n * @returns the extracted prefix.\n */\nexport function mustExtractPrefix(str: string, ...expected: string[]): string {\n  const prefix = str.slice(0, expected[0].length)\n  if (!expected.includes(prefix)) {\n    throw new Error(\n      `invalid prefix: ${prefix}. ${expected.length > 1 ? 'one of ' : ''}${expected.join(' or ')} was expected.`\n    )\n  }\n  return prefix\n}\n"]}