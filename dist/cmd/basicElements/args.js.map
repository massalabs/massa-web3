{"version":3,"file":"args.js","sourceRoot":"","sources":["../../../src/basicElements/args.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  U8,\n  U16,\n  U32,\n  U64,\n  U128,\n  U256,\n  arrayToBytes,\n  bytesToArray,\n  bytesToF32,\n  bytesToF64,\n  bytesToSerializableObjectArray,\n  bytesToStr,\n  deserializeObj,\n  f32ToBytes,\n  f64ToBytes,\n  serializableObjectsArrayToBytes,\n  strToBytes,\n  I8,\n  I16,\n  I32,\n  I64,\n  I128,\n  I256,\n} from './serializers'\n\n/**\n * Interface for serializable objects\n *\n * @see serialize - serialize object to Uint8Array\n * @see deserialize - deserialize Uint8Array to object\n */\nexport type Serializable<T> = {\n  serialize(): Uint8Array\n  deserialize(data: Uint8Array, offset: number): DeserializedResult<T>\n}\n\n/**\n * Interface for deserialized result\n *\n * @see instance - deserialized instance\n * @see offset - offset of the deserialized instance\n */\nexport type DeserializedResult<T> = {\n  instance: T\n  offset: number\n}\n\n/**\n * Typed Arguments facilitating the differentiation\n * between different argument types due to Javascript's\n * single number type.\n *\n * @remarks In AssemblyScript the latter are all native types\n */\nexport enum ArgTypes {\n  STRING,\n  BOOL,\n  U8,\n  U16,\n  U32,\n  U64,\n  U128,\n  U256,\n  I8,\n  I16,\n  I32,\n  I64,\n  I128,\n  I256,\n  F32,\n  F64,\n  ARRAY,\n  UINT8ARRAY,\n  SERIALIZABLE,\n  //eslint-disable-next-line @typescript-eslint/naming-convention\n  SERIALIZABLE_OBJECT_ARRAY,\n}\n\nexport enum ArrayTypes {\n  STRING,\n  BOOL,\n  U8,\n  U16,\n  U32,\n  U64,\n  U128,\n  U256,\n  I8,\n  I16,\n  I32,\n  I64,\n  I128,\n  I256,\n  F32,\n  F64,\n}\n\nexport type IParam = {\n  type: ArgTypes\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any\n}\n\n/**\n * Native types in AssemblyScript\n *\n * @remarks\n * These are the types that can be used in AssemblyScript\n */\nexport type NativeType = string | boolean | number | bigint\n\nconst BYTES_32_OFFSET = 4\nconst BYTES_64_OFFSET = 8\nexport const DEFAULT_OFFSET = 0\n\n/**\n * Storage and serialization class for remote function call arguments.\n *\n * @remarks\n * This class can serialize typescript native types into bytes, in order to\n * make smart-contract function call easier.\n * It also can deserialize bytes.\n *\n */\nexport class Args {\n  private argsList: IParam[] = []\n\n  /**\n   * Constructor to either serialize or deserialize data passed from/to DApps and remote Smart contracts.\n   *\n   * @param serialized - The optional serialized arguments to deserialize.\n   * @param offset - The optional offset to start deserializing from.\n   */\n  constructor(\n    public serialized = new Uint8Array(),\n    public offset = DEFAULT_OFFSET\n  ) {}\n\n  public getArgsList(): IParam[] {\n    return this.argsList\n  }\n\n  /**\n   * Returns the current deserialization offset of the serialized byte array.\n   *\n   * @returns the current offset\n   */\n  public getOffset(): number {\n    return this.offset\n  }\n\n  /**\n   * Returns the serialized byte array.\n   *\n   * @returns A byte array.\n   */\n  public serialize(): Uint8Array {\n    return Uint8Array.from(this.serialized)\n  }\n\n  // Getters\n\n  /**\n   * Returns the next string in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized string\n   */\n  public nextString(): string {\n    const length = Number(this.nextU32())\n    const end = this.offset + length\n    const result = bytesToStr(this.serialized.slice(this.offset, end))\n\n    this.offset = end\n    return result\n  }\n\n  private nextInteger(\n    extractor: (\n      buffer: Uint8Array,\n      offset: number\n    ) => { value: bigint; offset: number }\n  ): bigint {\n    const { value, offset } = extractor(this.serialized, this.offset)\n    this.offset = offset\n    return value\n  }\n\n  /**\n   * Returns the next unsigned byte in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextU8(): U8.U8 {\n    return this.nextInteger(U8.fromBuffer)\n  }\n\n  /**\n   * Returns the next unsigned short integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextU16(): U16.U16 {\n    return this.nextInteger(U16.fromBuffer)\n  }\n\n  /**\n   * Returns the next unsigned integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number\n   */\n  public nextU32(): U32.U32 {\n    return this.nextInteger(U32.fromBuffer)\n  }\n\n  /**\n   * Returns the next long integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextU64(): U64.U64 {\n    return this.nextInteger(U64.fromBuffer)\n  }\n\n  /**\n   * Returns the next uint128 in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextU128(): U128.U128 {\n    return this.nextInteger(U128.fromBuffer)\n  }\n\n  /**\n   * Returns the next uint256 in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextU256(): U256.U256 {\n    return this.nextInteger(U256.fromBuffer)\n  }\n\n  /**\n   * Returns the next signed byte in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextI8(): I8.I8 {\n    return this.nextInteger(I8.fromBuffer)\n  }\n\n  /**\n   * Returns the next signed short integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextI16(): I16.I16 {\n    return this.nextInteger(I16.fromBuffer)\n  }\n\n  /**\n   * Returns the next signed integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextI32(): I32.I32 {\n    return this.nextInteger(I32.fromBuffer)\n  }\n\n  /**\n   * Returns the next signed long integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextI64(): I64.I64 {\n    return this.nextInteger(I64.fromBuffer)\n  }\n\n  /**\n   * Returns the next signed long integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextI128(): I128.I128 {\n    return this.nextInteger(I128.fromBuffer)\n  }\n\n  /**\n   * Returns the next signed long integer in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextI256(): I256.I256 {\n    return this.nextInteger(I256.fromBuffer)\n  }\n\n  /**\n   * Returns the next boolean in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized boolean.\n   */\n  nextBool(): boolean {\n    return !!this.serialized[this.offset++]\n  }\n\n  /**\n   * Returns the next floating number in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextF32(): number {\n    const value = bytesToF32(this.serialized, this.offset)\n\n    this.offset += BYTES_32_OFFSET\n    return value\n  }\n\n  /**\n   * Returns the next long floating number in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized number.\n   */\n  public nextF64(): number {\n    const value = bytesToF64(this.serialized, this.offset)\n\n    this.offset += BYTES_64_OFFSET\n    return value\n  }\n\n  /**\n   * Returns the next sub byte array in the serialized byte array.\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @returns the deserialized byte array.\n   */\n  public nextUint8Array(): Uint8Array {\n    const length = Number(this.nextU32())\n    const byteArray = this.serialized.slice(this.offset, this.offset + length)\n\n    this.offset += length\n    return byteArray\n  }\n\n  /**\n   * Returns the next {@link ISerializable} object in the serialized byte array\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @param ctor - the class constructor prototype T.prototype\n   *\n   * @returns the deserialized object T\n   */\n  public nextSerializable<T extends Serializable<T>>(ctor: new () => T): T {\n    const deserializationResult = deserializeObj(\n      this.serialized,\n      this.offset,\n      ctor\n    )\n    this.offset = deserializationResult.offset\n    return deserializationResult.instance\n  }\n\n  /**\n   * Returns the next array of {@link ISerializable} objects in the serialized byte array\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @param ctor - the class constructor prototype T.prototype\n   *\n   * @returns the deserialized array of object that implement ISerializable\n   */\n  public nextSerializableObjectArray<T extends Serializable<T>>(\n    ctor: new () => T\n  ): T[] {\n    const length = Number(this.nextU32())\n\n    if (!length) {\n      return []\n    }\n\n    if (this.offset + length > this.serialized.length) {\n      throw new Error(\"can't deserialize length of array from given argument\")\n    }\n\n    const buffer = this.getNextData(length)\n\n    const value = bytesToSerializableObjectArray<T>(buffer, ctor)\n    this.offset += length\n    return value\n  }\n\n  /**\n   * Returns the next array of {@link ArgTypes} objects in the serialized byte array\n   *\n   * @remarks\n   * Increments to offset to point the data after the one that as been deserialized in the byte array.\n   *\n   * @param type - the type of the elements in the array.\n   *\n   * @returns the next array of object that are native type\n   */\n  nextArray<T>(type: ArrayTypes): T[] {\n    const length = Number(this.nextU32())\n\n    if (!length) {\n      return []\n    }\n\n    if (this.offset + length > this.serialized.length) {\n      throw new Error(\"can't deserialize length of array from given argument\")\n    }\n\n    const buffer = this.getNextData(length)\n    const value = bytesToArray<T>(buffer, type)\n    this.offset += length\n    return value\n  }\n\n  // Setter\n\n  /**\n   * Adds a unsigned byte to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addU8(value: U8.U8): this {\n    this.serialized = Args.concatArrays(this.serialized, U8.toBytes(value))\n    this.offset++\n    this.argsList.push({ type: ArgTypes.U8, value: value })\n    return this\n  }\n\n  public addU16(value: U16.U16): this {\n    this.serialized = Args.concatArrays(this.serialized, U16.toBytes(value))\n    this.offset += U16.SIZE_BYTE\n    this.argsList.push({ type: ArgTypes.U16, value: value })\n    return this\n  }\n\n  /**\n   * Adds an unsigned integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addU32(value: U32.U32): this {\n    this.serialized = Args.concatArrays(this.serialized, U32.toBytes(value))\n    this.offset += U32.SIZE_BYTE\n    this.argsList.push({ type: ArgTypes.U32, value: value })\n    return this\n  }\n\n  /**\n   * Adds an unsigned long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addU64(value: U64.U64): this {\n    this.serialized = Args.concatArrays(this.serialized, U64.toBytes(value))\n    this.offset += U64.SIZE_BYTE\n    this.argsList.push({ type: ArgTypes.U64, value: value })\n    return this\n  }\n\n  /**\n   * Adds an unsigned long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addU128(bigInt: U128.U128): this {\n    this.serialized = Args.concatArrays(this.serialized, U128.toBytes(bigInt))\n    this.offset += U128.SIZE_BYTE\n    this.argsList.push({ type: ArgTypes.U128, value: bigInt })\n    return this\n  }\n\n  /**\n   * Adds an unsigned long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addU256(bigInt: U256.U256): this {\n    this.serialized = Args.concatArrays(this.serialized, U256.toBytes(bigInt))\n    this.offset += U256.SIZE_BYTE\n    this.argsList.push({ type: ArgTypes.U256, value: bigInt })\n    return this\n  }\n\n  /**\n   * Adds a signed byte to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addI8(value: I8.I8): this {\n    this.serialized = Args.concatArrays(this.serialized, I8.toBytes(value))\n    this.offset++\n    this.argsList.push({ type: ArgTypes.I8, value: value })\n    return this\n  }\n\n  /**\n   * Adds a signed short integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addI16(value: I16.I16): this {\n    this.serialized = Args.concatArrays(this.serialized, I16.toBytes(value))\n    this.offset += I16.SIZE_BYTE\n    this.argsList.push({ type: ArgTypes.I16, value: value })\n    return this\n  }\n\n  /**\n   * Adds a signed integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addI32(value: I32.I32): this {\n    this.serialized = Args.concatArrays(this.serialized, I32.toBytes(value))\n    this.offset += I32.SIZE_BYTE\n    this.argsList.push({ type: ArgTypes.I32, value: value })\n    return this\n  }\n\n  /**\n   * Adds a signed long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addI64(value: I64.I64): this {\n    this.serialized = Args.concatArrays(this.serialized, I64.toBytes(value))\n    this.offset += I64.SIZE_BYTE\n    this.argsList.push({ type: ArgTypes.I64, value: value })\n    return this\n  }\n\n  /**\n   * Adds a signed long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addI128(value: I128.I128): this {\n    this.serialized = Args.concatArrays(this.serialized, I128.toBytes(value))\n    this.offset += I128.SIZE_BYTE\n    this.argsList.push({ type: ArgTypes.I128, value: value })\n    return this\n  }\n\n  /**\n   * Adds a signed long integer to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addI256(value: I256.I256): this {\n    this.serialized = Args.concatArrays(this.serialized, I256.toBytes(value))\n    this.offset += I256.SIZE_BYTE\n    this.argsList.push({ type: ArgTypes.I256, value: value })\n    return this\n  }\n\n  /**\n   * Adds a boolean to the serialized arguments.\n   *\n   * @param value - the boolean to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addBool(value: boolean): this {\n    this.serialized = Args.concatArrays(\n      this.serialized,\n      U8.toBytes(value ? 1n : 0n)\n    )\n    this.offset++\n    this.argsList.push({ type: ArgTypes.BOOL, value: value })\n    return this\n  }\n\n  /**\n   * Adds a floating number to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addF32(value: number): this {\n    this.serialized = Args.concatArrays(this.serialized, f32ToBytes(value))\n    this.offset += BYTES_32_OFFSET\n    this.argsList.push({ type: ArgTypes.F32, value: value })\n    return this\n  }\n\n  /**\n   * Adds a long floating number to the serialized arguments.\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addF64(value: number): this {\n    this.serialized = Args.concatArrays(this.serialized, f64ToBytes(value))\n    this.offset += BYTES_64_OFFSET\n    this.argsList.push({ type: ArgTypes.F64, value: value })\n    return this\n  }\n\n  /**\n   * Adds a byte array integer to the serialized arguments.\n   *\n   * @param array - the array to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addUint8Array(array: Uint8Array): this {\n    this.addU32(U32.fromNumber(array.length))\n    this.serialized = Args.concatArrays(this.serialized, array)\n    this.offset += array.length\n    // Remove the U32 from the argsList\n    this.argsList.pop()\n    this.argsList.push({ type: ArgTypes.UINT8ARRAY, value: array })\n    return this\n  }\n\n  /**\n   * Adds a string to the serialized arguments.\n   *\n   * @remarks\n   * Works only if the argument is an instance of a handled type (String of 4294967295 characters maximum)\n   *\n   * @param value - the number to add.\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addString(value: string): this {\n    const maxSize = 4294967295\n    const size = value.length\n\n    if (size > maxSize) {\n      // eslint-disable-next-line no-console\n      console.warn('input string is too long, it will be truncated')\n      value = value.slice(0, maxSize)\n    }\n\n    const serialized = strToBytes(value)\n    this.addU32(U32.fromNumber(serialized.length))\n    this.serialized = Args.concatArrays(this.serialized, strToBytes(value))\n    this.offset += strToBytes(value).length\n\n    // Remove the U32 from the argsList\n    this.argsList.pop()\n    this.argsList.push({ type: ArgTypes.STRING, value: value })\n\n    return this\n  }\n\n  /**\n   * Adds a serializable object to the serialized arguments.\n   *\n   * @remarks\n   * The object must implement the {@link ISerializable} interface\n   *\n   * @see {@link ISerializable}\n   *\n   * @param value - the object to add\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addSerializable<T>(value: Serializable<T>): this {\n    const serializedValue = value.serialize()\n    this.serialized = Args.concatArrays(this.serialized, serializedValue)\n    this.offset += serializedValue.length\n    this.argsList.push({ type: ArgTypes.SERIALIZABLE, value: value })\n    return this\n  }\n\n  /**\n   * Adds an array of serializable objects to the serialized arguments.\n   *\n   * @remarks\n   * Each object must implement the {@link ISerializable} interface.\n   * This will perform a deep copy of your objects thanks to the {@link ISerializable.serialize}\n   * method you define in your class.\n   *\n   * @see {@link ISerializable}\n   *\n   * @param arg - the argument to add\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  public addSerializableObjectArray<T extends Serializable<T>>(arg: T[]): this {\n    const content: Uint8Array = serializableObjectsArrayToBytes(arg)\n    this.addU32(U32.fromNumber(content.length))\n    this.serialized = Args.concatArrays(this.serialized, content)\n    this.offset += content.length\n\n    // Remove the U32 from the argsList\n    this.argsList.pop()\n    this.argsList.push({\n      type: ArgTypes.SERIALIZABLE_OBJECT_ARRAY,\n      value: arg,\n    })\n    return this\n  }\n\n  /**\n   * Adds an array of objects to the serialized arguments.\n   *\n   * @remarks\n   * If the type of the values of the array is not native type, this will serialize the pointers, which is certainly\n   * not what you want! You can only serialize properly array of native types or array of `Serializable` object.\n   *\n   * @see {@link addSerializableObjectArray}\n   *\n   * @param arg - the argument to add\n   *\n   * @returns the serialized arguments to be able to chain `add` method calls.\n   */\n  addArray(arg: NativeType[], type: ArrayTypes): this {\n    const content = arrayToBytes(arg, type)\n    this.addU32(U32.fromNumber(content.length))\n    this.serialized = Args.concatArrays(this.serialized, content)\n    this.offset += content.length\n\n    // Remove the U32 from the argsList\n    this.argsList.pop()\n    this.argsList.push({ type: ArgTypes.ARRAY, value: arg })\n    return this\n  }\n\n  // Utils\n\n  /**\n   * Internal function to concat to Uint8Array.\n   *\n   * @param a - first array to concat\n   * @param b - second array to concat\n   *\n   * @returns the concatenated array\n   */\n  static concatArrays(a: Uint8Array, b: Uint8Array): Uint8Array {\n    return new Uint8Array([...a, ...b])\n  }\n\n  /**\n   * Returns the data of requested size for current offset\n   *\n   * @param size - The data size\n   * @returns the slice of the serialized internal buffer\n   */\n  private getNextData(size: number): Uint8Array {\n    return this.serialized.slice(this.offset, this.offset + size)\n  }\n}\n"]}