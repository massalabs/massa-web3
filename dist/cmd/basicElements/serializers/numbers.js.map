{"version":3,"file":"numbers.js","sourceRoot":"","sources":["../../../../src/basicElements/serializers/numbers.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAEH,wBAA4B;AAE5B;;;;;;;GAOG;AACH,SAAgB,UAAU,CAAC,GAAW;IACpC,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,MAAG,CAAC,SAAS,CAAC,CAAA;IAC7C,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAA;IACjC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;IAC7B,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACpC,CAAC;AALD,gCAKC;AAED;;;;;;;;GAQG;AACH,SAAgB,UAAU,CAAC,GAAe,EAAE,MAAM,GAAG,CAAC;IACpD,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IACrC,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;AACtC,CAAC;AAHD,gCAGC;AAED;;;;;;;GAOG;AACH,SAAgB,UAAU,CAAC,GAAW;IACpC,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,MAAG,CAAC,SAAS,CAAC,CAAA;IAC7C,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAA;IACjC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAA;IAC7B,OAAO,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACpC,CAAC;AALD,gCAKC;AAED;;;;;;;;GAQG;AACH,SAAgB,UAAU,CAAC,GAAe,EAAE,MAAM,GAAG,CAAC;IACpD,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IACrC,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,CAAA;AACtC,CAAC;AAHD,gCAGC","sourcesContent":["/**\n * This module aim's to provide number variable types serialization and conversion helper functions.\n */\n\nimport { U32, U64 } from '.'\n\n/**\n * Converts a 32-bit floating-point number (f32) into a Uint8Array.\n *\n * @param val - The number to convert\n *\n * @returns A Uint8Array containing the serialized f32 value\n *\n */\nexport function f32ToBytes(val: number): Uint8Array {\n  const buffer = new ArrayBuffer(U32.SIZE_BYTE)\n  const view = new DataView(buffer)\n  view.setFloat32(0, val, true)\n  return new Uint8Array(view.buffer)\n}\n\n/**\n * Converts a Uint8Array into a 32-bit floating-point number (f32).\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the f32 value (default: 0)\n *\n * @returns The deserialized f32 value\n *\n */\nexport function bytesToF32(arr: Uint8Array, offset = 0): number {\n  const view = new DataView(arr.buffer)\n  return view.getFloat32(offset, true)\n}\n\n/**\n * Converts a 64-bit floating-point number (f64) into a Uint8Array.\n *\n * @param val - The BigInt to convert\n *\n * @returns A Uint8Array containing the serialized f64 value\n *\n */\nexport function f64ToBytes(val: number): Uint8Array {\n  const buffer = new ArrayBuffer(U64.SIZE_BYTE)\n  const view = new DataView(buffer)\n  view.setFloat64(0, val, true)\n  return new Uint8Array(view.buffer)\n}\n\n/**\n * Converts a Uint8Array into a f64 BigInt.\n *\n * @param arr - The array to convert\n * @param offset - The optional offset in the Uint8Array at which to start reading the f64 value (default: 0)\n *\n * @returns The deserialized f64 value\n *\n */\nexport function bytesToF64(arr: Uint8Array, offset = 0): number {\n  const view = new DataView(arr.buffer)\n  return view.getFloat64(offset, true)\n}\n"]}