{"version":3,"file":"arrays.js","sourceRoot":"","sources":["../../../../src/basicElements/serializers/arrays.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-case-declarations */\n\nimport {\n  Args,\n  NativeType,\n  ArrayTypes,\n  DeserializedResult,\n  Serializable,\n  DEFAULT_OFFSET,\n} from '../args'\nimport { bytesToStr } from './strings'\nimport { byteToBool } from './bool'\nimport { bytesToF32, bytesToF64 } from './numbers'\nimport { U8, U16, U32, U64, U128, U256, I8, I16, I32, I64, I128, I256 } from '.'\n\n/**\n * Get the byte size of a typed array unit.\n *\n * @param typedArrayTypes - The typed array unit to get the size of.\n *\n * @returns The size of the typed array unit.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function getDatatypeSize(type: ArrayTypes): number {\n  switch (type) {\n    case ArrayTypes.BOOL:\n    case ArrayTypes.U8:\n    case ArrayTypes.I8:\n      return U8.SIZE_BYTE\n    case ArrayTypes.F32:\n    case ArrayTypes.I32:\n    case ArrayTypes.U32:\n      return U32.SIZE_BYTE\n    case ArrayTypes.F64:\n    case ArrayTypes.I64:\n    case ArrayTypes.U64:\n      return U64.SIZE_BYTE\n    case ArrayTypes.I128:\n    case ArrayTypes.U128:\n      return U128.SIZE_BYTE\n    case ArrayTypes.U256:\n      return U256.SIZE_BYTE\n    default:\n      throw new Error(`Unsupported type: ${Object.keys(ArrayTypes)[type]}`)\n  }\n}\n\n/**\n * Serializes an array of serializable objects to bytes.\n *\n * @param source - The array of serializable objects to serialize.\n *\n * @returns The serialized array as Uint8Array.\n */\n\nexport function serializableObjectsArrayToBytes<T extends Serializable<T>>(\n  source: T[]\n): Uint8Array {\n  return source.reduce(\n    (acc, curr) => Args.concatArrays(acc, curr.serialize()),\n    //eslint-disable-next-line @typescript-eslint/no-magic-numbers\n    new Uint8Array(0)\n  )\n}\n\n/**\n * Deserializes a bytes array into an array of deserialized objects.\n *\n * @param data - The bytes array to deserialize.\n * @param offset - The offset to start deserializing from.\n * @param obj - The class used for deserialization.\n *\n * @returns The deserialized array of objects.\n */\nexport function deserializeObj<T extends Serializable<T>>(\n  data: Uint8Array,\n  offset: number,\n  obj: new () => T\n): DeserializedResult<T> {\n  return new obj().deserialize(data, offset)\n}\n\n/**\n * Converts a Uint8Array into an array of deserialized type parameters.\n *\n * @param source - The Uint8Array to convert.\n * @param obj - The class constructor for deserialization.\n *\n * @returns An array of deserialized objects.\n */\nexport function bytesToSerializableObjectArray<T extends Serializable<T>>(\n  source: Uint8Array,\n  obj: new () => T\n): T[] {\n  const array: T[] = []\n  let offset = DEFAULT_OFFSET\n\n  while (offset < source.length) {\n    const deserializationResult = deserializeObj(source, offset, obj)\n    offset = deserializationResult.offset\n    array.push(deserializationResult.instance)\n  }\n\n  return array\n}\n\n/**\n * Convert an array of native types to a Uint8Array.\n *\n * @remarks\n * This function performs a deep copy for native types only.\n * It is inspired by https://github.com/AssemblyScript/assemblyscript/blob/main/std/assembly/array.ts#L69-L81\n *\n * @param source - The array to convert.\n * @param type - The typed array unit type.\n *\n * @returns The converted Uint8Array.\n */\nexport function arrayToBytes(\n  source: NativeType[],\n  type: ArrayTypes\n): Uint8Array {\n  const args = new Args()\n  source.forEach((value) => {\n    switch (type) {\n      case ArrayTypes.STRING:\n        args.addString(value as string)\n        break\n      case ArrayTypes.BOOL:\n        args.addBool(value as boolean)\n        break\n      case ArrayTypes.U8:\n        args.addU8(value as U8.U8)\n        break\n      case ArrayTypes.U16:\n        args.addU16(value as U16.U16)\n        break\n      case ArrayTypes.U32:\n        args.addU32(value as U32.U32)\n        break\n      case ArrayTypes.U64:\n        args.addU64(value as U64.U64)\n        break\n      case ArrayTypes.U128:\n        args.addU128(value as U128.U128)\n        break\n      case ArrayTypes.U256:\n        args.addU256(value as U256.U256)\n        break\n      case ArrayTypes.I8:\n        args.addI8(value as I8.I8)\n        break\n      case ArrayTypes.I16:\n        args.addI16(value as I16.I16)\n        break\n      case ArrayTypes.I32:\n        args.addI32(value as I32.I32)\n        break\n      case ArrayTypes.I64:\n        args.addI64(value as I64.I64)\n        break\n      case ArrayTypes.I128:\n        args.addI128(value as I128.I128)\n        break\n      case ArrayTypes.I256:\n        args.addI256(value as I256.I256)\n        break\n      case ArrayTypes.F64:\n        args.addF64(value as number)\n        break\n      case ArrayTypes.F32:\n        args.addF32(value as number)\n        break\n      default:\n        throw new Error(`Unsupported type: ${type}`)\n    }\n  })\n  return new Uint8Array(args.serialize())\n}\n\n/**\n * Converts a Uint8Array into an array of native types.\n *\n * @remarks\n * This function is inspired by https://github.com/AssemblyScript/assemblyscript/blob/main/std/assembly/array.ts#L69-L81\n *\n * @param source - The Uint8Array to convert.\n * @param type - The typed array unit type.\n *\n * @returns An array of converted native types.\n */\nexport function bytesToArray<T>(source: Uint8Array, type: ArrayTypes): T[] {\n  const sourceLength = source.length\n\n  let byteOffset = DEFAULT_OFFSET\n  const result: T[] = []\n  let elementSize = 0\n\n  if (type !== ArrayTypes.STRING) {\n    elementSize = getDatatypeSize(type)\n  }\n\n  while (byteOffset < sourceLength) {\n    if (type === ArrayTypes.STRING) {\n      const { value, offset } = U32.fromBuffer(source, byteOffset)\n      elementSize = Number(value)\n      byteOffset = offset\n    }\n    const elt = source.slice(byteOffset, byteOffset + elementSize)\n    byteOffset += elementSize\n\n    switch (type) {\n      case ArrayTypes.STRING:\n        result.push(bytesToStr(elt) as T)\n        break\n      case ArrayTypes.BOOL:\n        result.push(byteToBool(elt) as T)\n        break\n      case ArrayTypes.U8:\n        result.push(U8.fromBytes(elt) as T)\n        break\n      case ArrayTypes.U16:\n        result.push(U16.fromBytes(elt) as T)\n        break\n      case ArrayTypes.U32:\n        result.push(U32.fromBytes(elt) as T)\n        break\n      case ArrayTypes.U64:\n        result.push(U64.fromBytes(elt) as T)\n        break\n      case ArrayTypes.U128:\n        result.push(U128.fromBytes(elt) as T)\n        break\n      case ArrayTypes.U256:\n        result.push(U256.fromBytes(elt) as T)\n        break\n      case ArrayTypes.I8:\n        result.push(I8.fromBytes(elt) as T)\n        break\n      case ArrayTypes.I16:\n        result.push(I16.fromBytes(elt) as T)\n        break\n      case ArrayTypes.I32:\n        result.push(I32.fromBytes(elt) as T)\n        break\n      case ArrayTypes.I64:\n        result.push(I64.fromBytes(elt) as T)\n        break\n      case ArrayTypes.I128:\n        result.push(I128.fromBytes(elt) as T)\n        break\n      case ArrayTypes.I256:\n        result.push(I256.fromBytes(elt) as T)\n        break\n      case ArrayTypes.F32:\n        result.push(bytesToF32(elt) as T)\n        break\n      case ArrayTypes.F64:\n        result.push(bytesToF64(elt) as T)\n        break\n    }\n  }\n  return result\n}\n"]}