// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "massa/model/v1/node.proto" (package "massa.model.v1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2023 MASSA LABS <info@massa.net>
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { NativeAmount } from "./amount";
import { ExecutionStats } from "./stats";
import { NetworkStats } from "./stats";
import { PoolStats } from "./stats";
import { ConsensusStats } from "./stats";
import { Slot } from "./slot";
import { NativeTime } from "./time";
/**
 * Node status
 *
 * @generated from protobuf message massa.model.v1.NodeStatus
 */
export interface NodeStatus {
    /**
     * Our node id
     *
     * @generated from protobuf field: string node_id = 1;
     */
    nodeId: string;
    /**
     * Optional node ip
     *
     * @generated from protobuf field: string node_ip = 2;
     */
    nodeIp: string;
    /**
     * Node version
     *
     * @generated from protobuf field: string version = 3;
     */
    version: string;
    /**
     * Now
     *
     * @generated from protobuf field: massa.model.v1.NativeTime current_time = 4;
     */
    currentTime?: NativeTime;
    /**
     * Current cycle
     *
     * @generated from protobuf field: uint64 current_cycle = 5;
     */
    currentCycle: bigint;
    /**
     * Current cycle starting timestamp
     *
     * @generated from protobuf field: massa.model.v1.NativeTime current_cycle_time = 6;
     */
    currentCycleTime?: NativeTime;
    /**
     * Next cycle starting timestamp
     *
     * @generated from protobuf field: massa.model.v1.NativeTime next_cycle_time = 7;
     */
    nextCycleTime?: NativeTime;
    /**
     * Connected nodes
     *
     * @generated from protobuf field: repeated massa.model.v1.ConnectedNode connected_nodes = 8;
     */
    connectedNodes: ConnectedNode[];
    /**
     * Last executed final slot
     *
     * @generated from protobuf field: massa.model.v1.Slot last_executed_final_slot = 9;
     */
    lastExecutedFinalSlot?: Slot;
    /**
     * Last executed speculative slot
     *
     * @generated from protobuf field: massa.model.v1.Slot last_executed_speculative_slot = 10;
     */
    lastExecutedSpeculativeSlot?: Slot;
    /**
     * The hash of the XOF final state hash
     *
     * @generated from protobuf field: string final_state_fingerprint = 11;
     */
    finalStateFingerprint: string;
    /**
     * Consensus stats
     *
     * @generated from protobuf field: massa.model.v1.ConsensusStats consensus_stats = 12;
     */
    consensusStats?: ConsensusStats;
    /**
     * Pool stats (operation count and endorsement count)
     *
     * @generated from protobuf field: massa.model.v1.PoolStats pool_stats = 13;
     */
    poolStats?: PoolStats;
    /**
     * Network stats
     *
     * @generated from protobuf field: massa.model.v1.NetworkStats network_stats = 14;
     */
    networkStats?: NetworkStats;
    /**
     * Execution stats
     *
     * @generated from protobuf field: massa.model.v1.ExecutionStats execution_stats = 15;
     */
    executionStats?: ExecutionStats;
    /**
     * Compact configuration
     *
     * @generated from protobuf field: massa.model.v1.CompactConfig config = 16;
     */
    config?: CompactConfig;
}
/**
 * Connected node
 *
 * @generated from protobuf message massa.model.v1.ConnectedNode
 */
export interface ConnectedNode {
    /**
     * Node id
     *
     * @generated from protobuf field: string node_id = 1;
     */
    nodeId: string;
    /**
     * Node ip
     *
     * @generated from protobuf field: string node_ip = 2;
     */
    nodeIp: string;
    /**
     * Connection type
     *
     * @generated from protobuf field: massa.model.v1.ConnectionType connection_type = 3;
     */
    connectionType: ConnectionType;
}
/**
 * Compact configuration
 *
 * @generated from protobuf message massa.model.v1.CompactConfig
 */
export interface CompactConfig {
    /**
     * Time in milliseconds when the blockclique started.
     *
     * @generated from protobuf field: massa.model.v1.NativeTime genesis_timestamp = 1;
     */
    genesisTimestamp?: NativeTime;
    /**
     * TESTNET: time when the blockclique is ended.
     *
     * @generated from protobuf field: massa.model.v1.NativeTime end_timestamp = 2;
     */
    endTimestamp?: NativeTime;
    /**
     * Number of threads
     *
     * @generated from protobuf field: uint32 thread_count = 3;
     */
    threadCount: number;
    /**
     * Time between the periods in the same thread.
     *
     * @generated from protobuf field: massa.model.v1.NativeTime t0 = 4;
     */
    t0?: NativeTime;
    /**
     * Threshold for fitness.
     *
     * @generated from protobuf field: uint64 delta_f0 = 5;
     */
    deltaF0: bigint;
    /**
     * Maximum operation validity period count
     *
     * @generated from protobuf field: uint64 operation_validity_periods = 6;
     */
    operationValidityPeriods: bigint;
    /**
     * cycle duration in periods
     *
     * @generated from protobuf field: uint64 periods_per_cycle = 7;
     */
    periodsPerCycle: bigint;
    /**
     * Reward amount for a block creation
     *
     * @generated from protobuf field: massa.model.v1.NativeAmount block_reward = 8;
     */
    blockReward?: NativeAmount;
    /**
     * Price of a roll on the network
     *
     * @generated from protobuf field: massa.model.v1.NativeAmount roll_price = 9;
     */
    rollPrice?: NativeAmount;
    /**
     * Max total size of a block
     *
     * @generated from protobuf field: uint32 max_block_size = 10;
     */
    maxBlockSize: number;
}
/**
 * Public status
 *
 * @generated from protobuf message massa.model.v1.PublicStatus
 */
export interface PublicStatus {
    /**
     * Our node id
     *
     * @generated from protobuf field: string node_id = 1;
     */
    nodeId: string;
    /**
     * Node version
     *
     * @generated from protobuf field: string version = 3;
     */
    version: string;
    /**
     * Now
     *
     * @generated from protobuf field: massa.model.v1.NativeTime current_time = 4;
     */
    currentTime?: NativeTime;
    /**
     * Current cycle
     *
     * @generated from protobuf field: uint64 current_cycle = 5;
     */
    currentCycle: bigint;
    /**
     * Current cycle starting timestamp
     *
     * @generated from protobuf field: massa.model.v1.NativeTime current_cycle_time = 6;
     */
    currentCycleTime?: NativeTime;
    /**
     * Next cycle starting timestamp
     *
     * @generated from protobuf field: massa.model.v1.NativeTime next_cycle_time = 7;
     */
    nextCycleTime?: NativeTime;
    /**
     * Last executed final slot
     *
     * @generated from protobuf field: massa.model.v1.Slot last_executed_final_slot = 8;
     */
    lastExecutedFinalSlot?: Slot;
    /**
     * Last executed speculative slot
     *
     * @generated from protobuf field: massa.model.v1.Slot last_executed_speculative_slot = 9;
     */
    lastExecutedSpeculativeSlot?: Slot;
    /**
     * The hash of the XOF final state hash
     *
     * @generated from protobuf field: string final_state_fingerprint = 10;
     */
    finalStateFingerprint: string;
    /**
     * Compact configuration
     *
     * @generated from protobuf field: massa.model.v1.CompactConfig config = 11;
     */
    config?: CompactConfig;
}
/**
 * ConnectionType enum
 *
 * @generated from protobuf enum massa.model.v1.ConnectionType
 */
export enum ConnectionType {
    /**
     * Default enum value
     *
     * @generated from protobuf enum value: CONNECTION_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Incoming connection
     *
     * @generated from protobuf enum value: CONNECTION_TYPE_INCOMING = 1;
     */
    INCOMING = 1,
    /**
     * Outgoing connection
     *
     * @generated from protobuf enum value: CONNECTION_TYPE_OUTGOING = 2;
     */
    OUTGOING = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class NodeStatus$Type extends MessageType<NodeStatus> {
    constructor() {
        super("massa.model.v1.NodeStatus", [
            { no: 1, name: "node_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "node_ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "current_time", kind: "message", T: () => NativeTime },
            { no: 5, name: "current_cycle", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "current_cycle_time", kind: "message", T: () => NativeTime },
            { no: 7, name: "next_cycle_time", kind: "message", T: () => NativeTime },
            { no: 8, name: "connected_nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ConnectedNode },
            { no: 9, name: "last_executed_final_slot", kind: "message", T: () => Slot },
            { no: 10, name: "last_executed_speculative_slot", kind: "message", T: () => Slot },
            { no: 11, name: "final_state_fingerprint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "consensus_stats", kind: "message", T: () => ConsensusStats },
            { no: 13, name: "pool_stats", kind: "message", T: () => PoolStats },
            { no: 14, name: "network_stats", kind: "message", T: () => NetworkStats },
            { no: 15, name: "execution_stats", kind: "message", T: () => ExecutionStats },
            { no: 16, name: "config", kind: "message", T: () => CompactConfig }
        ]);
    }
    create(value?: PartialMessage<NodeStatus>): NodeStatus {
        const message = { nodeId: "", nodeIp: "", version: "", currentCycle: 0n, connectedNodes: [], finalStateFingerprint: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NodeStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NodeStatus): NodeStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string node_id */ 1:
                    message.nodeId = reader.string();
                    break;
                case /* string node_ip */ 2:
                    message.nodeIp = reader.string();
                    break;
                case /* string version */ 3:
                    message.version = reader.string();
                    break;
                case /* massa.model.v1.NativeTime current_time */ 4:
                    message.currentTime = NativeTime.internalBinaryRead(reader, reader.uint32(), options, message.currentTime);
                    break;
                case /* uint64 current_cycle */ 5:
                    message.currentCycle = reader.uint64().toBigInt();
                    break;
                case /* massa.model.v1.NativeTime current_cycle_time */ 6:
                    message.currentCycleTime = NativeTime.internalBinaryRead(reader, reader.uint32(), options, message.currentCycleTime);
                    break;
                case /* massa.model.v1.NativeTime next_cycle_time */ 7:
                    message.nextCycleTime = NativeTime.internalBinaryRead(reader, reader.uint32(), options, message.nextCycleTime);
                    break;
                case /* repeated massa.model.v1.ConnectedNode connected_nodes */ 8:
                    message.connectedNodes.push(ConnectedNode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* massa.model.v1.Slot last_executed_final_slot */ 9:
                    message.lastExecutedFinalSlot = Slot.internalBinaryRead(reader, reader.uint32(), options, message.lastExecutedFinalSlot);
                    break;
                case /* massa.model.v1.Slot last_executed_speculative_slot */ 10:
                    message.lastExecutedSpeculativeSlot = Slot.internalBinaryRead(reader, reader.uint32(), options, message.lastExecutedSpeculativeSlot);
                    break;
                case /* string final_state_fingerprint */ 11:
                    message.finalStateFingerprint = reader.string();
                    break;
                case /* massa.model.v1.ConsensusStats consensus_stats */ 12:
                    message.consensusStats = ConsensusStats.internalBinaryRead(reader, reader.uint32(), options, message.consensusStats);
                    break;
                case /* massa.model.v1.PoolStats pool_stats */ 13:
                    message.poolStats = PoolStats.internalBinaryRead(reader, reader.uint32(), options, message.poolStats);
                    break;
                case /* massa.model.v1.NetworkStats network_stats */ 14:
                    message.networkStats = NetworkStats.internalBinaryRead(reader, reader.uint32(), options, message.networkStats);
                    break;
                case /* massa.model.v1.ExecutionStats execution_stats */ 15:
                    message.executionStats = ExecutionStats.internalBinaryRead(reader, reader.uint32(), options, message.executionStats);
                    break;
                case /* massa.model.v1.CompactConfig config */ 16:
                    message.config = CompactConfig.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NodeStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string node_id = 1; */
        if (message.nodeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nodeId);
        /* string node_ip = 2; */
        if (message.nodeIp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nodeIp);
        /* string version = 3; */
        if (message.version !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.version);
        /* massa.model.v1.NativeTime current_time = 4; */
        if (message.currentTime)
            NativeTime.internalBinaryWrite(message.currentTime, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 current_cycle = 5; */
        if (message.currentCycle !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.currentCycle);
        /* massa.model.v1.NativeTime current_cycle_time = 6; */
        if (message.currentCycleTime)
            NativeTime.internalBinaryWrite(message.currentCycleTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.NativeTime next_cycle_time = 7; */
        if (message.nextCycleTime)
            NativeTime.internalBinaryWrite(message.nextCycleTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated massa.model.v1.ConnectedNode connected_nodes = 8; */
        for (let i = 0; i < message.connectedNodes.length; i++)
            ConnectedNode.internalBinaryWrite(message.connectedNodes[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.Slot last_executed_final_slot = 9; */
        if (message.lastExecutedFinalSlot)
            Slot.internalBinaryWrite(message.lastExecutedFinalSlot, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.Slot last_executed_speculative_slot = 10; */
        if (message.lastExecutedSpeculativeSlot)
            Slot.internalBinaryWrite(message.lastExecutedSpeculativeSlot, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string final_state_fingerprint = 11; */
        if (message.finalStateFingerprint !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.finalStateFingerprint);
        /* massa.model.v1.ConsensusStats consensus_stats = 12; */
        if (message.consensusStats)
            ConsensusStats.internalBinaryWrite(message.consensusStats, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.PoolStats pool_stats = 13; */
        if (message.poolStats)
            PoolStats.internalBinaryWrite(message.poolStats, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.NetworkStats network_stats = 14; */
        if (message.networkStats)
            NetworkStats.internalBinaryWrite(message.networkStats, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.ExecutionStats execution_stats = 15; */
        if (message.executionStats)
            ExecutionStats.internalBinaryWrite(message.executionStats, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.CompactConfig config = 16; */
        if (message.config)
            CompactConfig.internalBinaryWrite(message.config, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.NodeStatus
 */
export const NodeStatus = new NodeStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectedNode$Type extends MessageType<ConnectedNode> {
    constructor() {
        super("massa.model.v1.ConnectedNode", [
            { no: 1, name: "node_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "node_ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "connection_type", kind: "enum", T: () => ["massa.model.v1.ConnectionType", ConnectionType, "CONNECTION_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<ConnectedNode>): ConnectedNode {
        const message = { nodeId: "", nodeIp: "", connectionType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectedNode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectedNode): ConnectedNode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string node_id */ 1:
                    message.nodeId = reader.string();
                    break;
                case /* string node_ip */ 2:
                    message.nodeIp = reader.string();
                    break;
                case /* massa.model.v1.ConnectionType connection_type */ 3:
                    message.connectionType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectedNode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string node_id = 1; */
        if (message.nodeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nodeId);
        /* string node_ip = 2; */
        if (message.nodeIp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nodeIp);
        /* massa.model.v1.ConnectionType connection_type = 3; */
        if (message.connectionType !== 0)
            writer.tag(3, WireType.Varint).int32(message.connectionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.ConnectedNode
 */
export const ConnectedNode = new ConnectedNode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompactConfig$Type extends MessageType<CompactConfig> {
    constructor() {
        super("massa.model.v1.CompactConfig", [
            { no: 1, name: "genesis_timestamp", kind: "message", T: () => NativeTime },
            { no: 2, name: "end_timestamp", kind: "message", T: () => NativeTime },
            { no: 3, name: "thread_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "t0", kind: "message", T: () => NativeTime },
            { no: 5, name: "delta_f0", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "operation_validity_periods", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "periods_per_cycle", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "block_reward", kind: "message", T: () => NativeAmount },
            { no: 9, name: "roll_price", kind: "message", T: () => NativeAmount },
            { no: 10, name: "max_block_size", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CompactConfig>): CompactConfig {
        const message = { threadCount: 0, deltaF0: 0n, operationValidityPeriods: 0n, periodsPerCycle: 0n, maxBlockSize: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CompactConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompactConfig): CompactConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* massa.model.v1.NativeTime genesis_timestamp */ 1:
                    message.genesisTimestamp = NativeTime.internalBinaryRead(reader, reader.uint32(), options, message.genesisTimestamp);
                    break;
                case /* massa.model.v1.NativeTime end_timestamp */ 2:
                    message.endTimestamp = NativeTime.internalBinaryRead(reader, reader.uint32(), options, message.endTimestamp);
                    break;
                case /* uint32 thread_count */ 3:
                    message.threadCount = reader.uint32();
                    break;
                case /* massa.model.v1.NativeTime t0 */ 4:
                    message.t0 = NativeTime.internalBinaryRead(reader, reader.uint32(), options, message.t0);
                    break;
                case /* uint64 delta_f0 */ 5:
                    message.deltaF0 = reader.uint64().toBigInt();
                    break;
                case /* uint64 operation_validity_periods */ 6:
                    message.operationValidityPeriods = reader.uint64().toBigInt();
                    break;
                case /* uint64 periods_per_cycle */ 7:
                    message.periodsPerCycle = reader.uint64().toBigInt();
                    break;
                case /* massa.model.v1.NativeAmount block_reward */ 8:
                    message.blockReward = NativeAmount.internalBinaryRead(reader, reader.uint32(), options, message.blockReward);
                    break;
                case /* massa.model.v1.NativeAmount roll_price */ 9:
                    message.rollPrice = NativeAmount.internalBinaryRead(reader, reader.uint32(), options, message.rollPrice);
                    break;
                case /* uint32 max_block_size */ 10:
                    message.maxBlockSize = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompactConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* massa.model.v1.NativeTime genesis_timestamp = 1; */
        if (message.genesisTimestamp)
            NativeTime.internalBinaryWrite(message.genesisTimestamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.NativeTime end_timestamp = 2; */
        if (message.endTimestamp)
            NativeTime.internalBinaryWrite(message.endTimestamp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 thread_count = 3; */
        if (message.threadCount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.threadCount);
        /* massa.model.v1.NativeTime t0 = 4; */
        if (message.t0)
            NativeTime.internalBinaryWrite(message.t0, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 delta_f0 = 5; */
        if (message.deltaF0 !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.deltaF0);
        /* uint64 operation_validity_periods = 6; */
        if (message.operationValidityPeriods !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.operationValidityPeriods);
        /* uint64 periods_per_cycle = 7; */
        if (message.periodsPerCycle !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.periodsPerCycle);
        /* massa.model.v1.NativeAmount block_reward = 8; */
        if (message.blockReward)
            NativeAmount.internalBinaryWrite(message.blockReward, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.NativeAmount roll_price = 9; */
        if (message.rollPrice)
            NativeAmount.internalBinaryWrite(message.rollPrice, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* uint32 max_block_size = 10; */
        if (message.maxBlockSize !== 0)
            writer.tag(10, WireType.Varint).uint32(message.maxBlockSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.CompactConfig
 */
export const CompactConfig = new CompactConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublicStatus$Type extends MessageType<PublicStatus> {
    constructor() {
        super("massa.model.v1.PublicStatus", [
            { no: 1, name: "node_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "current_time", kind: "message", T: () => NativeTime },
            { no: 5, name: "current_cycle", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "current_cycle_time", kind: "message", T: () => NativeTime },
            { no: 7, name: "next_cycle_time", kind: "message", T: () => NativeTime },
            { no: 8, name: "last_executed_final_slot", kind: "message", T: () => Slot },
            { no: 9, name: "last_executed_speculative_slot", kind: "message", T: () => Slot },
            { no: 10, name: "final_state_fingerprint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "config", kind: "message", T: () => CompactConfig }
        ]);
    }
    create(value?: PartialMessage<PublicStatus>): PublicStatus {
        const message = { nodeId: "", version: "", currentCycle: 0n, finalStateFingerprint: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PublicStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublicStatus): PublicStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string node_id */ 1:
                    message.nodeId = reader.string();
                    break;
                case /* string version */ 3:
                    message.version = reader.string();
                    break;
                case /* massa.model.v1.NativeTime current_time */ 4:
                    message.currentTime = NativeTime.internalBinaryRead(reader, reader.uint32(), options, message.currentTime);
                    break;
                case /* uint64 current_cycle */ 5:
                    message.currentCycle = reader.uint64().toBigInt();
                    break;
                case /* massa.model.v1.NativeTime current_cycle_time */ 6:
                    message.currentCycleTime = NativeTime.internalBinaryRead(reader, reader.uint32(), options, message.currentCycleTime);
                    break;
                case /* massa.model.v1.NativeTime next_cycle_time */ 7:
                    message.nextCycleTime = NativeTime.internalBinaryRead(reader, reader.uint32(), options, message.nextCycleTime);
                    break;
                case /* massa.model.v1.Slot last_executed_final_slot */ 8:
                    message.lastExecutedFinalSlot = Slot.internalBinaryRead(reader, reader.uint32(), options, message.lastExecutedFinalSlot);
                    break;
                case /* massa.model.v1.Slot last_executed_speculative_slot */ 9:
                    message.lastExecutedSpeculativeSlot = Slot.internalBinaryRead(reader, reader.uint32(), options, message.lastExecutedSpeculativeSlot);
                    break;
                case /* string final_state_fingerprint */ 10:
                    message.finalStateFingerprint = reader.string();
                    break;
                case /* massa.model.v1.CompactConfig config */ 11:
                    message.config = CompactConfig.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PublicStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string node_id = 1; */
        if (message.nodeId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.nodeId);
        /* string version = 3; */
        if (message.version !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.version);
        /* massa.model.v1.NativeTime current_time = 4; */
        if (message.currentTime)
            NativeTime.internalBinaryWrite(message.currentTime, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 current_cycle = 5; */
        if (message.currentCycle !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.currentCycle);
        /* massa.model.v1.NativeTime current_cycle_time = 6; */
        if (message.currentCycleTime)
            NativeTime.internalBinaryWrite(message.currentCycleTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.NativeTime next_cycle_time = 7; */
        if (message.nextCycleTime)
            NativeTime.internalBinaryWrite(message.nextCycleTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.Slot last_executed_final_slot = 8; */
        if (message.lastExecutedFinalSlot)
            Slot.internalBinaryWrite(message.lastExecutedFinalSlot, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.Slot last_executed_speculative_slot = 9; */
        if (message.lastExecutedSpeculativeSlot)
            Slot.internalBinaryWrite(message.lastExecutedSpeculativeSlot, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string final_state_fingerprint = 10; */
        if (message.finalStateFingerprint !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.finalStateFingerprint);
        /* massa.model.v1.CompactConfig config = 11; */
        if (message.config)
            CompactConfig.internalBinaryWrite(message.config, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.PublicStatus
 */
export const PublicStatus = new PublicStatus$Type();
