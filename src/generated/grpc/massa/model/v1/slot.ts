// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "massa/model/v1/slot.proto" (package "massa.model.v1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2023 MASSA LABS <info@massa.net>
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * When an address is drawn to create an endorsement it is selected for a specific index
 *
 * @generated from protobuf message massa.model.v1.IndexedSlot
 */
export interface IndexedSlot {
    /**
     * Slot
     *
     * @generated from protobuf field: massa.model.v1.Slot slot = 1;
     */
    slot?: Slot;
    /**
     * Endorsement index in the slot
     *
     * @generated from protobuf field: uint64 index = 2;
     */
    index: bigint;
}
/**
 * A point in time where a block is expected
 *
 * @generated from protobuf message massa.model.v1.Slot
 */
export interface Slot {
    /**
     * Period
     *
     * @generated from protobuf field: uint64 period = 1;
     */
    period: bigint;
    /**
     * Thread
     *
     * @generated from protobuf field: uint32 thread = 2;
     */
    thread: number;
}
/**
 * Slots
 *
 * @generated from protobuf message massa.model.v1.Slots
 */
export interface Slots {
    /**
     * Slots
     *
     * @generated from protobuf field: repeated massa.model.v1.Slot slots = 1;
     */
    slots: Slot[];
}
/**
 * SlotRange
 *
 * @generated from protobuf message massa.model.v1.SlotRange
 */
export interface SlotRange {
    /**
     * Start lot (Optional)
     *
     * @generated from protobuf field: massa.model.v1.Slot start_slot = 1;
     */
    startSlot?: Slot;
    /**
     * End slot (Optional)
     *
     * @generated from protobuf field: massa.model.v1.Slot end_slot = 2;
     */
    endSlot?: Slot;
}
// @generated message type with reflection information, may provide speed optimized methods
class IndexedSlot$Type extends MessageType<IndexedSlot> {
    constructor() {
        super("massa.model.v1.IndexedSlot", [
            { no: 1, name: "slot", kind: "message", T: () => Slot },
            { no: 2, name: "index", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<IndexedSlot>): IndexedSlot {
        const message = { index: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IndexedSlot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndexedSlot): IndexedSlot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* massa.model.v1.Slot slot */ 1:
                    message.slot = Slot.internalBinaryRead(reader, reader.uint32(), options, message.slot);
                    break;
                case /* uint64 index */ 2:
                    message.index = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndexedSlot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* massa.model.v1.Slot slot = 1; */
        if (message.slot)
            Slot.internalBinaryWrite(message.slot, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 index = 2; */
        if (message.index !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.IndexedSlot
 */
export const IndexedSlot = new IndexedSlot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Slot$Type extends MessageType<Slot> {
    constructor() {
        super("massa.model.v1.Slot", [
            { no: 1, name: "period", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "thread", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Slot>): Slot {
        const message = { period: 0n, thread: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Slot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Slot): Slot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 period */ 1:
                    message.period = reader.uint64().toBigInt();
                    break;
                case /* uint32 thread */ 2:
                    message.thread = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Slot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 period = 1; */
        if (message.period !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.period);
        /* uint32 thread = 2; */
        if (message.thread !== 0)
            writer.tag(2, WireType.Varint).uint32(message.thread);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.Slot
 */
export const Slot = new Slot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Slots$Type extends MessageType<Slots> {
    constructor() {
        super("massa.model.v1.Slots", [
            { no: 1, name: "slots", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Slot }
        ]);
    }
    create(value?: PartialMessage<Slots>): Slots {
        const message = { slots: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Slots>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Slots): Slots {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated massa.model.v1.Slot slots */ 1:
                    message.slots.push(Slot.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Slots, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated massa.model.v1.Slot slots = 1; */
        for (let i = 0; i < message.slots.length; i++)
            Slot.internalBinaryWrite(message.slots[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.Slots
 */
export const Slots = new Slots$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SlotRange$Type extends MessageType<SlotRange> {
    constructor() {
        super("massa.model.v1.SlotRange", [
            { no: 1, name: "start_slot", kind: "message", T: () => Slot },
            { no: 2, name: "end_slot", kind: "message", T: () => Slot }
        ]);
    }
    create(value?: PartialMessage<SlotRange>): SlotRange {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SlotRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SlotRange): SlotRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* massa.model.v1.Slot start_slot */ 1:
                    message.startSlot = Slot.internalBinaryRead(reader, reader.uint32(), options, message.startSlot);
                    break;
                case /* massa.model.v1.Slot end_slot */ 2:
                    message.endSlot = Slot.internalBinaryRead(reader, reader.uint32(), options, message.endSlot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SlotRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* massa.model.v1.Slot start_slot = 1; */
        if (message.startSlot)
            Slot.internalBinaryWrite(message.startSlot, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.Slot end_slot = 2; */
        if (message.endSlot)
            Slot.internalBinaryWrite(message.endSlot, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.SlotRange
 */
export const SlotRange = new SlotRange$Type();
