// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "massa/model/v1/block.proto" (package "massa.model.v1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2023 MASSA LABS <info@massa.net>
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SignedOperation } from "./operation";
import { SignedEndorsement } from "./endorsement";
import { Slot } from "./slot";
import { UInt32Value } from "../../../google/protobuf/wrappers";
/**
 * Block
 *
 * @generated from protobuf message massa.model.v1.Block
 */
export interface Block {
    /**
     * Signed header
     *
     * @generated from protobuf field: massa.model.v1.SignedBlockHeader header = 1;
     */
    header?: SignedBlockHeader;
    /**
     * Operations ids
     *
     * @generated from protobuf field: repeated string operations = 2;
     */
    operations: string[];
}
/**
 * Filled block
 *
 * @generated from protobuf message massa.model.v1.FilledBlock
 */
export interface FilledBlock {
    /**
     * Signed header
     *
     * @generated from protobuf field: massa.model.v1.SignedBlockHeader header = 1;
     */
    header?: SignedBlockHeader;
    /**
     * Operations
     *
     * @generated from protobuf field: repeated massa.model.v1.FilledOperationEntry operations = 2;
     */
    operations: FilledOperationEntry[];
}
/**
 * Block header
 *
 * @generated from protobuf message massa.model.v1.BlockHeader
 */
export interface BlockHeader {
    /**
     * Current network version
     *
     * @generated from protobuf field: uint32 current_version = 1;
     */
    currentVersion: number;
    /**
     * Announced network version(Optional)
     *
     * @generated from protobuf field: google.protobuf.UInt32Value announced_version = 2;
     */
    announcedVersion?: UInt32Value;
    /**
     * Slot
     *
     * @generated from protobuf field: massa.model.v1.Slot slot = 3;
     */
    slot?: Slot;
    /**
     * parents
     *
     * @generated from protobuf field: repeated string parents = 4;
     */
    parents: string[];
    /**
     * All operations hash
     *
     * @generated from protobuf field: string operations_hash = 5;
     */
    operationsHash: string;
    /**
     * Signed endorsements
     *
     * @generated from protobuf field: repeated massa.model.v1.SignedEndorsement endorsements = 6;
     */
    endorsements: SignedEndorsement[];
}
/**
 * Filled Operation Tuple
 *
 * @generated from protobuf message massa.model.v1.FilledOperationEntry
 */
export interface FilledOperationEntry {
    /**
     * Operation id
     *
     * @generated from protobuf field: string operation_id = 1;
     */
    operationId: string;
    /**
     * Signed operation
     *
     * @generated from protobuf field: massa.model.v1.SignedOperation operation = 2;
     */
    operation?: SignedOperation;
}
/**
 * Signed block
 *
 * @generated from protobuf message massa.model.v1.SignedBlock
 */
export interface SignedBlock {
    /**
     * Block
     *
     * @generated from protobuf field: massa.model.v1.Block content = 1;
     */
    content?: Block;
    /**
     * A cryptographically generated value using `serialized_data` and a public key.
     *
     * @generated from protobuf field: string signature = 2;
     */
    signature: string;
    /**
     * The public-key component used in the generation of the signature
     *
     * @generated from protobuf field: string content_creator_pub_key = 3;
     */
    contentCreatorPubKey: string;
    /**
     * Derived from the same public key used to generate the signature
     *
     * @generated from protobuf field: string content_creator_address = 4;
     */
    contentCreatorAddress: string;
    /**
     * A secure hash of the non-malleable contents of a deterministic binary representation of the block header
     *
     * @generated from protobuf field: string secure_hash = 5;
     */
    secureHash: string;
    /**
     * The size of the serialized block in bytes
     *
     * @generated from protobuf field: uint64 serialized_size = 6;
     */
    serializedSize: bigint;
}
/**
 * Signed block header
 *
 * @generated from protobuf message massa.model.v1.SignedBlockHeader
 */
export interface SignedBlockHeader {
    /**
     * BlockHeader
     *
     * @generated from protobuf field: massa.model.v1.BlockHeader content = 1;
     */
    content?: BlockHeader;
    /**
     * A cryptographically generated value using `serialized_data` and a public key.
     *
     * @generated from protobuf field: string signature = 2;
     */
    signature: string;
    /**
     * The public-key component used in the generation of the signature
     *
     * @generated from protobuf field: string content_creator_pub_key = 3;
     */
    contentCreatorPubKey: string;
    /**
     * Derived from the same public key used to generate the signature
     *
     * @generated from protobuf field: string content_creator_address = 4;
     */
    contentCreatorAddress: string;
    /**
     * A secure hash of the non-malleable contents of a deterministic binary representation of the block header
     *
     * @generated from protobuf field: string secure_hash = 5;
     */
    secureHash: string;
    /**
     * The size of the serialized block header in bytes
     *
     * @generated from protobuf field: uint64 serialized_size = 6;
     */
    serializedSize: bigint;
}
/**
 * A wrapper around a block with its metadata
 *
 * @generated from protobuf message massa.model.v1.BlockWrapper
 */
export interface BlockWrapper {
    /**
     * The execution status of the block
     *
     * @generated from protobuf field: massa.model.v1.BlockStatus status = 1;
     */
    status: BlockStatus;
    /**
     * The block object itself
     *
     * @generated from protobuf field: massa.model.v1.Block block = 2;
     */
    block?: Block;
}
/**
 * Informations about a block with its metadata
 *
 * @generated from protobuf message massa.model.v1.BlockInfo
 */
export interface BlockInfo {
    /**
     * The unique ID of the block.
     *
     * @generated from protobuf field: string block_id = 1;
     */
    blockId: string;
    /**
     * The execution status of the block
     *
     * @generated from protobuf field: massa.model.v1.BlockStatus status = 2;
     */
    status: BlockStatus;
}
/**
 * BlockIds holds block ids
 *
 * @generated from protobuf message massa.model.v1.BlockIds
 */
export interface BlockIds {
    /**
     * Block ids
     *
     * @generated from protobuf field: repeated string block_ids = 1;
     */
    blockIds: string[];
}
/**
 * Block parent tuple
 *
 * @generated from protobuf message massa.model.v1.BlockParent
 */
export interface BlockParent {
    /**
     * Block id
     *
     * @generated from protobuf field: string block_id = 1;
     */
    blockId: string;
    /**
     * Period
     *
     * @generated from protobuf field: uint64 period = 2;
     */
    period: bigint;
}
/**
 * Possible statuses for a block
 *
 * @generated from protobuf enum massa.model.v1.BlockStatus
 */
export enum BlockStatus {
    /**
     * Default enum value
     *
     * @generated from protobuf enum value: BLOCK_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * The block is in the greatest clique (and not final)
     *
     * @generated from protobuf enum value: BLOCK_STATUS_NON_FINAL_BLOCKCLIQUE = 1;
     */
    NON_FINAL_BLOCKCLIQUE = 1,
    /**
     * The block is final
     *
     * @generated from protobuf enum value: BLOCK_STATUS_FINAL = 2;
     */
    FINAL = 2,
    /**
     * The block is candidate (active any clique but not final)
     *
     * @generated from protobuf enum value: BLOCK_STATUS_NON_FINAL_ALTERNATE_CLIQUE = 3;
     */
    NON_FINAL_ALTERNATE_CLIQUE = 3,
    /**
     * The block is discarded
     *
     * @generated from protobuf enum value: BLOCK_STATUS_DISCARDED = 4;
     */
    DISCARDED = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class Block$Type extends MessageType<Block> {
    constructor() {
        super("massa.model.v1.Block", [
            { no: 1, name: "header", kind: "message", T: () => SignedBlockHeader },
            { no: 2, name: "operations", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Block>): Block {
        const message = { operations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Block>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Block): Block {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* massa.model.v1.SignedBlockHeader header */ 1:
                    message.header = SignedBlockHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated string operations */ 2:
                    message.operations.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Block, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* massa.model.v1.SignedBlockHeader header = 1; */
        if (message.header)
            SignedBlockHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string operations = 2; */
        for (let i = 0; i < message.operations.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.operations[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.Block
 */
export const Block = new Block$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilledBlock$Type extends MessageType<FilledBlock> {
    constructor() {
        super("massa.model.v1.FilledBlock", [
            { no: 1, name: "header", kind: "message", T: () => SignedBlockHeader },
            { no: 2, name: "operations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FilledOperationEntry }
        ]);
    }
    create(value?: PartialMessage<FilledBlock>): FilledBlock {
        const message = { operations: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FilledBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilledBlock): FilledBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* massa.model.v1.SignedBlockHeader header */ 1:
                    message.header = SignedBlockHeader.internalBinaryRead(reader, reader.uint32(), options, message.header);
                    break;
                case /* repeated massa.model.v1.FilledOperationEntry operations */ 2:
                    message.operations.push(FilledOperationEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilledBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* massa.model.v1.SignedBlockHeader header = 1; */
        if (message.header)
            SignedBlockHeader.internalBinaryWrite(message.header, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated massa.model.v1.FilledOperationEntry operations = 2; */
        for (let i = 0; i < message.operations.length; i++)
            FilledOperationEntry.internalBinaryWrite(message.operations[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.FilledBlock
 */
export const FilledBlock = new FilledBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockHeader$Type extends MessageType<BlockHeader> {
    constructor() {
        super("massa.model.v1.BlockHeader", [
            { no: 1, name: "current_version", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "announced_version", kind: "message", T: () => UInt32Value },
            { no: 3, name: "slot", kind: "message", T: () => Slot },
            { no: 4, name: "parents", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "operations_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "endorsements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SignedEndorsement }
        ]);
    }
    create(value?: PartialMessage<BlockHeader>): BlockHeader {
        const message = { currentVersion: 0, parents: [], operationsHash: "", endorsements: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockHeader): BlockHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 current_version */ 1:
                    message.currentVersion = reader.uint32();
                    break;
                case /* google.protobuf.UInt32Value announced_version */ 2:
                    message.announcedVersion = UInt32Value.internalBinaryRead(reader, reader.uint32(), options, message.announcedVersion);
                    break;
                case /* massa.model.v1.Slot slot */ 3:
                    message.slot = Slot.internalBinaryRead(reader, reader.uint32(), options, message.slot);
                    break;
                case /* repeated string parents */ 4:
                    message.parents.push(reader.string());
                    break;
                case /* string operations_hash */ 5:
                    message.operationsHash = reader.string();
                    break;
                case /* repeated massa.model.v1.SignedEndorsement endorsements */ 6:
                    message.endorsements.push(SignedEndorsement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 current_version = 1; */
        if (message.currentVersion !== 0)
            writer.tag(1, WireType.Varint).uint32(message.currentVersion);
        /* google.protobuf.UInt32Value announced_version = 2; */
        if (message.announcedVersion)
            UInt32Value.internalBinaryWrite(message.announcedVersion, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* massa.model.v1.Slot slot = 3; */
        if (message.slot)
            Slot.internalBinaryWrite(message.slot, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string parents = 4; */
        for (let i = 0; i < message.parents.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.parents[i]);
        /* string operations_hash = 5; */
        if (message.operationsHash !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.operationsHash);
        /* repeated massa.model.v1.SignedEndorsement endorsements = 6; */
        for (let i = 0; i < message.endorsements.length; i++)
            SignedEndorsement.internalBinaryWrite(message.endorsements[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.BlockHeader
 */
export const BlockHeader = new BlockHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilledOperationEntry$Type extends MessageType<FilledOperationEntry> {
    constructor() {
        super("massa.model.v1.FilledOperationEntry", [
            { no: 1, name: "operation_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operation", kind: "message", T: () => SignedOperation }
        ]);
    }
    create(value?: PartialMessage<FilledOperationEntry>): FilledOperationEntry {
        const message = { operationId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FilledOperationEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilledOperationEntry): FilledOperationEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string operation_id */ 1:
                    message.operationId = reader.string();
                    break;
                case /* massa.model.v1.SignedOperation operation */ 2:
                    message.operation = SignedOperation.internalBinaryRead(reader, reader.uint32(), options, message.operation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilledOperationEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string operation_id = 1; */
        if (message.operationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.operationId);
        /* massa.model.v1.SignedOperation operation = 2; */
        if (message.operation)
            SignedOperation.internalBinaryWrite(message.operation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.FilledOperationEntry
 */
export const FilledOperationEntry = new FilledOperationEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignedBlock$Type extends MessageType<SignedBlock> {
    constructor() {
        super("massa.model.v1.SignedBlock", [
            { no: 1, name: "content", kind: "message", T: () => Block },
            { no: 2, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content_creator_pub_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content_creator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "secure_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "serialized_size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SignedBlock>): SignedBlock {
        const message = { signature: "", contentCreatorPubKey: "", contentCreatorAddress: "", secureHash: "", serializedSize: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignedBlock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignedBlock): SignedBlock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* massa.model.v1.Block content */ 1:
                    message.content = Block.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* string signature */ 2:
                    message.signature = reader.string();
                    break;
                case /* string content_creator_pub_key */ 3:
                    message.contentCreatorPubKey = reader.string();
                    break;
                case /* string content_creator_address */ 4:
                    message.contentCreatorAddress = reader.string();
                    break;
                case /* string secure_hash */ 5:
                    message.secureHash = reader.string();
                    break;
                case /* uint64 serialized_size */ 6:
                    message.serializedSize = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignedBlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* massa.model.v1.Block content = 1; */
        if (message.content)
            Block.internalBinaryWrite(message.content, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string signature = 2; */
        if (message.signature !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.signature);
        /* string content_creator_pub_key = 3; */
        if (message.contentCreatorPubKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contentCreatorPubKey);
        /* string content_creator_address = 4; */
        if (message.contentCreatorAddress !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contentCreatorAddress);
        /* string secure_hash = 5; */
        if (message.secureHash !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.secureHash);
        /* uint64 serialized_size = 6; */
        if (message.serializedSize !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.serializedSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.SignedBlock
 */
export const SignedBlock = new SignedBlock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignedBlockHeader$Type extends MessageType<SignedBlockHeader> {
    constructor() {
        super("massa.model.v1.SignedBlockHeader", [
            { no: 1, name: "content", kind: "message", T: () => BlockHeader },
            { no: 2, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content_creator_pub_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content_creator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "secure_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "serialized_size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SignedBlockHeader>): SignedBlockHeader {
        const message = { signature: "", contentCreatorPubKey: "", contentCreatorAddress: "", secureHash: "", serializedSize: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SignedBlockHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignedBlockHeader): SignedBlockHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* massa.model.v1.BlockHeader content */ 1:
                    message.content = BlockHeader.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* string signature */ 2:
                    message.signature = reader.string();
                    break;
                case /* string content_creator_pub_key */ 3:
                    message.contentCreatorPubKey = reader.string();
                    break;
                case /* string content_creator_address */ 4:
                    message.contentCreatorAddress = reader.string();
                    break;
                case /* string secure_hash */ 5:
                    message.secureHash = reader.string();
                    break;
                case /* uint64 serialized_size */ 6:
                    message.serializedSize = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignedBlockHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* massa.model.v1.BlockHeader content = 1; */
        if (message.content)
            BlockHeader.internalBinaryWrite(message.content, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string signature = 2; */
        if (message.signature !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.signature);
        /* string content_creator_pub_key = 3; */
        if (message.contentCreatorPubKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contentCreatorPubKey);
        /* string content_creator_address = 4; */
        if (message.contentCreatorAddress !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contentCreatorAddress);
        /* string secure_hash = 5; */
        if (message.secureHash !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.secureHash);
        /* uint64 serialized_size = 6; */
        if (message.serializedSize !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.serializedSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.SignedBlockHeader
 */
export const SignedBlockHeader = new SignedBlockHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockWrapper$Type extends MessageType<BlockWrapper> {
    constructor() {
        super("massa.model.v1.BlockWrapper", [
            { no: 1, name: "status", kind: "enum", T: () => ["massa.model.v1.BlockStatus", BlockStatus, "BLOCK_STATUS_"] },
            { no: 2, name: "block", kind: "message", T: () => Block }
        ]);
    }
    create(value?: PartialMessage<BlockWrapper>): BlockWrapper {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockWrapper): BlockWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* massa.model.v1.BlockStatus status */ 1:
                    message.status = reader.int32();
                    break;
                case /* massa.model.v1.Block block */ 2:
                    message.block = Block.internalBinaryRead(reader, reader.uint32(), options, message.block);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* massa.model.v1.BlockStatus status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* massa.model.v1.Block block = 2; */
        if (message.block)
            Block.internalBinaryWrite(message.block, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.BlockWrapper
 */
export const BlockWrapper = new BlockWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockInfo$Type extends MessageType<BlockInfo> {
    constructor() {
        super("massa.model.v1.BlockInfo", [
            { no: 1, name: "block_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["massa.model.v1.BlockStatus", BlockStatus, "BLOCK_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<BlockInfo>): BlockInfo {
        const message = { blockId: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockInfo): BlockInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string block_id */ 1:
                    message.blockId = reader.string();
                    break;
                case /* massa.model.v1.BlockStatus status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string block_id = 1; */
        if (message.blockId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.blockId);
        /* massa.model.v1.BlockStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.BlockInfo
 */
export const BlockInfo = new BlockInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockIds$Type extends MessageType<BlockIds> {
    constructor() {
        super("massa.model.v1.BlockIds", [
            { no: 1, name: "block_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BlockIds>): BlockIds {
        const message = { blockIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockIds>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockIds): BlockIds {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string block_ids */ 1:
                    message.blockIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockIds, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string block_ids = 1; */
        for (let i = 0; i < message.blockIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.blockIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.BlockIds
 */
export const BlockIds = new BlockIds$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlockParent$Type extends MessageType<BlockParent> {
    constructor() {
        super("massa.model.v1.BlockParent", [
            { no: 1, name: "block_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "period", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BlockParent>): BlockParent {
        const message = { blockId: "", period: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlockParent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlockParent): BlockParent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string block_id */ 1:
                    message.blockId = reader.string();
                    break;
                case /* uint64 period */ 2:
                    message.period = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlockParent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string block_id = 1; */
        if (message.blockId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.blockId);
        /* uint64 period = 2; */
        if (message.period !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.period);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message massa.model.v1.BlockParent
 */
export const BlockParent = new BlockParent$Type();
