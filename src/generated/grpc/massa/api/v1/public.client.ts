// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies
// @generated from protobuf file "massa/api/v1/public.proto" (package "massa.api.v1", syntax proto3)
// tslint:disable
//
// Copyright (c) 2023 MASSA LABS <info@massa.net>
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PublicService } from "./public";
import type { TransactionsThroughputResponse } from "./public";
import type { TransactionsThroughputRequest } from "./public";
import type { SendOperationsResponse } from "./public";
import type { SendOperationsRequest } from "./public";
import type { SendEndorsementsResponse } from "./public";
import type { SendEndorsementsRequest } from "./public";
import type { SendBlocksResponse } from "./public";
import type { SendBlocksRequest } from "./public";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { NewSlotExecutionOutputsResponse } from "./public";
import type { NewSlotExecutionOutputsRequest } from "./public";
import type { NewOperationsResponse } from "./public";
import type { NewOperationsRequest } from "./public";
import type { NewFilledBlocksResponse } from "./public";
import type { NewFilledBlocksRequest } from "./public";
import type { NewEndorsementsResponse } from "./public";
import type { NewEndorsementsRequest } from "./public";
import type { NewBlocksResponse } from "./public";
import type { NewBlocksRequest } from "./public";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SearchOperationsResponse } from "./public";
import type { SearchOperationsRequest } from "./public";
import type { SearchEndorsementsResponse } from "./public";
import type { SearchEndorsementsRequest } from "./public";
import type { SearchBlocksResponse } from "./public";
import type { SearchBlocksRequest } from "./public";
import type { QueryStateResponse } from "./public";
import type { QueryStateRequest } from "./public";
import type { GetTransactionsThroughputResponse } from "./public";
import type { GetTransactionsThroughputRequest } from "./public";
import type { GetStatusResponse } from "./public";
import type { GetStatusRequest } from "./public";
import type { GetStakersResponse } from "./public";
import type { GetStakersRequest } from "./public";
import type { GetSelectorDrawsResponse } from "./public";
import type { GetSelectorDrawsRequest } from "./public";
import type { GetScExecutionEventsResponse } from "./public";
import type { GetScExecutionEventsRequest } from "./public";
import type { GetOperationsResponse } from "./public";
import type { GetOperationsRequest } from "./public";
import type { GetNextBlockBestParentsResponse } from "./public";
import type { GetNextBlockBestParentsRequest } from "./public";
import type { GetEndorsementsResponse } from "./public";
import type { GetEndorsementsRequest } from "./public";
import type { GetDatastoreEntriesResponse } from "./public";
import type { GetDatastoreEntriesRequest } from "./public";
import type { GetBlocksResponse } from "./public";
import type { GetBlocksRequest } from "./public";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ExecuteReadOnlyCallResponse } from "./public";
import type { ExecuteReadOnlyCallRequest } from "./public";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Massa public gRPC service
 *
 * @generated from protobuf service massa.api.v1.PublicService
 */
export interface IPublicServiceClient {
    /**
     * Execute read only call
     *
     * @generated from protobuf rpc: ExecuteReadOnlyCall(massa.api.v1.ExecuteReadOnlyCallRequest) returns (massa.api.v1.ExecuteReadOnlyCallResponse);
     */
    executeReadOnlyCall(input: ExecuteReadOnlyCallRequest, options?: RpcOptions): UnaryCall<ExecuteReadOnlyCallRequest, ExecuteReadOnlyCallResponse>;
    /**
     * Get blocks by ids
     *
     * @generated from protobuf rpc: GetBlocks(massa.api.v1.GetBlocksRequest) returns (massa.api.v1.GetBlocksResponse);
     */
    getBlocks(input: GetBlocksRequest, options?: RpcOptions): UnaryCall<GetBlocksRequest, GetBlocksResponse>;
    /**
     * Get datastore entries
     *
     * @generated from protobuf rpc: GetDatastoreEntries(massa.api.v1.GetDatastoreEntriesRequest) returns (massa.api.v1.GetDatastoreEntriesResponse);
     */
    getDatastoreEntries(input: GetDatastoreEntriesRequest, options?: RpcOptions): UnaryCall<GetDatastoreEntriesRequest, GetDatastoreEntriesResponse>;
    /**
     * Get endorsements by ids
     *
     * @generated from protobuf rpc: GetEndorsements(massa.api.v1.GetEndorsementsRequest) returns (massa.api.v1.GetEndorsementsResponse);
     */
    getEndorsements(input: GetEndorsementsRequest, options?: RpcOptions): UnaryCall<GetEndorsementsRequest, GetEndorsementsResponse>;
    /**
     * Get next block best parents
     *
     * @generated from protobuf rpc: GetNextBlockBestParents(massa.api.v1.GetNextBlockBestParentsRequest) returns (massa.api.v1.GetNextBlockBestParentsResponse);
     */
    getNextBlockBestParents(input: GetNextBlockBestParentsRequest, options?: RpcOptions): UnaryCall<GetNextBlockBestParentsRequest, GetNextBlockBestParentsResponse>;
    /**
     * Get operations by ids
     *
     * @generated from protobuf rpc: GetOperations(massa.api.v1.GetOperationsRequest) returns (massa.api.v1.GetOperationsResponse);
     */
    getOperations(input: GetOperationsRequest, options?: RpcOptions): UnaryCall<GetOperationsRequest, GetOperationsResponse>;
    /**
     * Get smart contracts execution events
     *
     * @generated from protobuf rpc: GetScExecutionEvents(massa.api.v1.GetScExecutionEventsRequest) returns (massa.api.v1.GetScExecutionEventsResponse);
     */
    getScExecutionEvents(input: GetScExecutionEventsRequest, options?: RpcOptions): UnaryCall<GetScExecutionEventsRequest, GetScExecutionEventsResponse>;
    /**
     * Get selector draws
     *
     * @generated from protobuf rpc: GetSelectorDraws(massa.api.v1.GetSelectorDrawsRequest) returns (massa.api.v1.GetSelectorDrawsResponse);
     */
    getSelectorDraws(input: GetSelectorDrawsRequest, options?: RpcOptions): UnaryCall<GetSelectorDrawsRequest, GetSelectorDrawsResponse>;
    /**
     * Get stakers
     *
     * @generated from protobuf rpc: GetStakers(massa.api.v1.GetStakersRequest) returns (massa.api.v1.GetStakersResponse);
     */
    getStakers(input: GetStakersRequest, options?: RpcOptions): UnaryCall<GetStakersRequest, GetStakersResponse>;
    /**
     * Get status
     *
     * @generated from protobuf rpc: GetStatus(massa.api.v1.GetStatusRequest) returns (massa.api.v1.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse>;
    /**
     * Get transactions throughput
     *
     * @generated from protobuf rpc: GetTransactionsThroughput(massa.api.v1.GetTransactionsThroughputRequest) returns (massa.api.v1.GetTransactionsThroughputResponse);
     */
    getTransactionsThroughput(input: GetTransactionsThroughputRequest, options?: RpcOptions): UnaryCall<GetTransactionsThroughputRequest, GetTransactionsThroughputResponse>;
    /**
     * Query state
     *
     * @generated from protobuf rpc: QueryState(massa.api.v1.QueryStateRequest) returns (massa.api.v1.QueryStateResponse);
     */
    queryState(input: QueryStateRequest, options?: RpcOptions): UnaryCall<QueryStateRequest, QueryStateResponse>;
    /**
     * Search blocks
     *
     * @generated from protobuf rpc: SearchBlocks(massa.api.v1.SearchBlocksRequest) returns (massa.api.v1.SearchBlocksResponse);
     */
    searchBlocks(input: SearchBlocksRequest, options?: RpcOptions): UnaryCall<SearchBlocksRequest, SearchBlocksResponse>;
    /**
     * Search endorsements
     *
     * @generated from protobuf rpc: SearchEndorsements(massa.api.v1.SearchEndorsementsRequest) returns (massa.api.v1.SearchEndorsementsResponse);
     */
    searchEndorsements(input: SearchEndorsementsRequest, options?: RpcOptions): UnaryCall<SearchEndorsementsRequest, SearchEndorsementsResponse>;
    /**
     * Search operations
     *
     * @generated from protobuf rpc: SearchOperations(massa.api.v1.SearchOperationsRequest) returns (massa.api.v1.SearchOperationsResponse);
     */
    searchOperations(input: SearchOperationsRequest, options?: RpcOptions): UnaryCall<SearchOperationsRequest, SearchOperationsResponse>;
    // ███████╗████████╗██████╗ ███████╗ █████╗ ███╗   ███╗
    // ██╔════╝╚══██╔══╝██╔══██╗██╔════╝██╔══██╗████╗ ████║
    // ███████╗   ██║   ██████╔╝█████╗  ███████║██╔████╔██║
    // ╚════██║   ██║   ██╔══██╗██╔══╝  ██╔══██║██║╚██╔╝██║
    // ███████║   ██║   ██║  ██║███████╗██║  ██║██║ ╚═╝ ██║

    /**
     * New received and produced blocks
     *
     * @generated from protobuf rpc: NewBlocks(stream massa.api.v1.NewBlocksRequest) returns (stream massa.api.v1.NewBlocksResponse);
     */
    newBlocks(options?: RpcOptions): DuplexStreamingCall<NewBlocksRequest, NewBlocksResponse>;
    /**
     * New received and produced endorsements
     *
     * @generated from protobuf rpc: NewEndorsements(stream massa.api.v1.NewEndorsementsRequest) returns (stream massa.api.v1.NewEndorsementsResponse);
     */
    newEndorsements(options?: RpcOptions): DuplexStreamingCall<NewEndorsementsRequest, NewEndorsementsResponse>;
    /**
     * New received and produced blocks with operations
     *
     * @generated from protobuf rpc: NewFilledBlocks(stream massa.api.v1.NewFilledBlocksRequest) returns (stream massa.api.v1.NewFilledBlocksResponse);
     */
    newFilledBlocks(options?: RpcOptions): DuplexStreamingCall<NewFilledBlocksRequest, NewFilledBlocksResponse>;
    /**
     * New received and produced operations
     *
     * @generated from protobuf rpc: NewOperations(stream massa.api.v1.NewOperationsRequest) returns (stream massa.api.v1.NewOperationsResponse);
     */
    newOperations(options?: RpcOptions): DuplexStreamingCall<NewOperationsRequest, NewOperationsResponse>;
    /**
     * New received and slot execution events
     *
     * @generated from protobuf rpc: NewSlotExecutionOutputs(stream massa.api.v1.NewSlotExecutionOutputsRequest) returns (stream massa.api.v1.NewSlotExecutionOutputsResponse);
     */
    newSlotExecutionOutputs(options?: RpcOptions): DuplexStreamingCall<NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse>;
    /**
     * unidirectional streaming
     *
     * @generated from protobuf rpc: NewSlotExecutionOutputsServer(massa.api.v1.NewSlotExecutionOutputsRequest) returns (stream massa.api.v1.NewSlotExecutionOutputsResponse);
     */
    newSlotExecutionOutputsServer(input: NewSlotExecutionOutputsRequest, options?: RpcOptions): ServerStreamingCall<NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse>;
    /**
     * Send blocks
     *
     * @generated from protobuf rpc: SendBlocks(stream massa.api.v1.SendBlocksRequest) returns (stream massa.api.v1.SendBlocksResponse);
     */
    sendBlocks(options?: RpcOptions): DuplexStreamingCall<SendBlocksRequest, SendBlocksResponse>;
    /**
     * Send endorsements
     *
     * @generated from protobuf rpc: SendEndorsements(stream massa.api.v1.SendEndorsementsRequest) returns (stream massa.api.v1.SendEndorsementsResponse);
     */
    sendEndorsements(options?: RpcOptions): DuplexStreamingCall<SendEndorsementsRequest, SendEndorsementsResponse>;
    /**
     * Send operations
     *
     * @generated from protobuf rpc: SendOperations(stream massa.api.v1.SendOperationsRequest) returns (stream massa.api.v1.SendOperationsResponse);
     */
    sendOperations(options?: RpcOptions): DuplexStreamingCall<SendOperationsRequest, SendOperationsResponse>;
    /**
     * Transactions throughput
     *
     * @generated from protobuf rpc: TransactionsThroughput(stream massa.api.v1.TransactionsThroughputRequest) returns (stream massa.api.v1.TransactionsThroughputResponse);
     */
    transactionsThroughput(options?: RpcOptions): DuplexStreamingCall<TransactionsThroughputRequest, TransactionsThroughputResponse>;
}
/**
 * Massa public gRPC service
 *
 * @generated from protobuf service massa.api.v1.PublicService
 */
export class PublicServiceClient implements IPublicServiceClient, ServiceInfo {
    typeName = PublicService.typeName;
    methods = PublicService.methods;
    options = PublicService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Execute read only call
     *
     * @generated from protobuf rpc: ExecuteReadOnlyCall(massa.api.v1.ExecuteReadOnlyCallRequest) returns (massa.api.v1.ExecuteReadOnlyCallResponse);
     */
    executeReadOnlyCall(input: ExecuteReadOnlyCallRequest, options?: RpcOptions): UnaryCall<ExecuteReadOnlyCallRequest, ExecuteReadOnlyCallResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExecuteReadOnlyCallRequest, ExecuteReadOnlyCallResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get blocks by ids
     *
     * @generated from protobuf rpc: GetBlocks(massa.api.v1.GetBlocksRequest) returns (massa.api.v1.GetBlocksResponse);
     */
    getBlocks(input: GetBlocksRequest, options?: RpcOptions): UnaryCall<GetBlocksRequest, GetBlocksResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBlocksRequest, GetBlocksResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get datastore entries
     *
     * @generated from protobuf rpc: GetDatastoreEntries(massa.api.v1.GetDatastoreEntriesRequest) returns (massa.api.v1.GetDatastoreEntriesResponse);
     */
    getDatastoreEntries(input: GetDatastoreEntriesRequest, options?: RpcOptions): UnaryCall<GetDatastoreEntriesRequest, GetDatastoreEntriesResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDatastoreEntriesRequest, GetDatastoreEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get endorsements by ids
     *
     * @generated from protobuf rpc: GetEndorsements(massa.api.v1.GetEndorsementsRequest) returns (massa.api.v1.GetEndorsementsResponse);
     */
    getEndorsements(input: GetEndorsementsRequest, options?: RpcOptions): UnaryCall<GetEndorsementsRequest, GetEndorsementsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetEndorsementsRequest, GetEndorsementsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get next block best parents
     *
     * @generated from protobuf rpc: GetNextBlockBestParents(massa.api.v1.GetNextBlockBestParentsRequest) returns (massa.api.v1.GetNextBlockBestParentsResponse);
     */
    getNextBlockBestParents(input: GetNextBlockBestParentsRequest, options?: RpcOptions): UnaryCall<GetNextBlockBestParentsRequest, GetNextBlockBestParentsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNextBlockBestParentsRequest, GetNextBlockBestParentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get operations by ids
     *
     * @generated from protobuf rpc: GetOperations(massa.api.v1.GetOperationsRequest) returns (massa.api.v1.GetOperationsResponse);
     */
    getOperations(input: GetOperationsRequest, options?: RpcOptions): UnaryCall<GetOperationsRequest, GetOperationsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOperationsRequest, GetOperationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get smart contracts execution events
     *
     * @generated from protobuf rpc: GetScExecutionEvents(massa.api.v1.GetScExecutionEventsRequest) returns (massa.api.v1.GetScExecutionEventsResponse);
     */
    getScExecutionEvents(input: GetScExecutionEventsRequest, options?: RpcOptions): UnaryCall<GetScExecutionEventsRequest, GetScExecutionEventsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetScExecutionEventsRequest, GetScExecutionEventsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get selector draws
     *
     * @generated from protobuf rpc: GetSelectorDraws(massa.api.v1.GetSelectorDrawsRequest) returns (massa.api.v1.GetSelectorDrawsResponse);
     */
    getSelectorDraws(input: GetSelectorDrawsRequest, options?: RpcOptions): UnaryCall<GetSelectorDrawsRequest, GetSelectorDrawsResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSelectorDrawsRequest, GetSelectorDrawsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get stakers
     *
     * @generated from protobuf rpc: GetStakers(massa.api.v1.GetStakersRequest) returns (massa.api.v1.GetStakersResponse);
     */
    getStakers(input: GetStakersRequest, options?: RpcOptions): UnaryCall<GetStakersRequest, GetStakersResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStakersRequest, GetStakersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get status
     *
     * @generated from protobuf rpc: GetStatus(massa.api.v1.GetStatusRequest) returns (massa.api.v1.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusRequest, GetStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get transactions throughput
     *
     * @generated from protobuf rpc: GetTransactionsThroughput(massa.api.v1.GetTransactionsThroughputRequest) returns (massa.api.v1.GetTransactionsThroughputResponse);
     */
    getTransactionsThroughput(input: GetTransactionsThroughputRequest, options?: RpcOptions): UnaryCall<GetTransactionsThroughputRequest, GetTransactionsThroughputResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTransactionsThroughputRequest, GetTransactionsThroughputResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Query state
     *
     * @generated from protobuf rpc: QueryState(massa.api.v1.QueryStateRequest) returns (massa.api.v1.QueryStateResponse);
     */
    queryState(input: QueryStateRequest, options?: RpcOptions): UnaryCall<QueryStateRequest, QueryStateResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryStateRequest, QueryStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Search blocks
     *
     * @generated from protobuf rpc: SearchBlocks(massa.api.v1.SearchBlocksRequest) returns (massa.api.v1.SearchBlocksResponse);
     */
    searchBlocks(input: SearchBlocksRequest, options?: RpcOptions): UnaryCall<SearchBlocksRequest, SearchBlocksResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchBlocksRequest, SearchBlocksResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Search endorsements
     *
     * @generated from protobuf rpc: SearchEndorsements(massa.api.v1.SearchEndorsementsRequest) returns (massa.api.v1.SearchEndorsementsResponse);
     */
    searchEndorsements(input: SearchEndorsementsRequest, options?: RpcOptions): UnaryCall<SearchEndorsementsRequest, SearchEndorsementsResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchEndorsementsRequest, SearchEndorsementsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Search operations
     *
     * @generated from protobuf rpc: SearchOperations(massa.api.v1.SearchOperationsRequest) returns (massa.api.v1.SearchOperationsResponse);
     */
    searchOperations(input: SearchOperationsRequest, options?: RpcOptions): UnaryCall<SearchOperationsRequest, SearchOperationsResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchOperationsRequest, SearchOperationsResponse>("unary", this._transport, method, opt, input);
    }
    // ███████╗████████╗██████╗ ███████╗ █████╗ ███╗   ███╗
    // ██╔════╝╚══██╔══╝██╔══██╗██╔════╝██╔══██╗████╗ ████║
    // ███████╗   ██║   ██████╔╝█████╗  ███████║██╔████╔██║
    // ╚════██║   ██║   ██╔══██╗██╔══╝  ██╔══██║██║╚██╔╝██║
    // ███████║   ██║   ██║  ██║███████╗██║  ██║██║ ╚═╝ ██║

    /**
     * New received and produced blocks
     *
     * @generated from protobuf rpc: NewBlocks(stream massa.api.v1.NewBlocksRequest) returns (stream massa.api.v1.NewBlocksResponse);
     */
    newBlocks(options?: RpcOptions): DuplexStreamingCall<NewBlocksRequest, NewBlocksResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewBlocksRequest, NewBlocksResponse>("duplex", this._transport, method, opt);
    }
    /**
     * New received and produced endorsements
     *
     * @generated from protobuf rpc: NewEndorsements(stream massa.api.v1.NewEndorsementsRequest) returns (stream massa.api.v1.NewEndorsementsResponse);
     */
    newEndorsements(options?: RpcOptions): DuplexStreamingCall<NewEndorsementsRequest, NewEndorsementsResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewEndorsementsRequest, NewEndorsementsResponse>("duplex", this._transport, method, opt);
    }
    /**
     * New received and produced blocks with operations
     *
     * @generated from protobuf rpc: NewFilledBlocks(stream massa.api.v1.NewFilledBlocksRequest) returns (stream massa.api.v1.NewFilledBlocksResponse);
     */
    newFilledBlocks(options?: RpcOptions): DuplexStreamingCall<NewFilledBlocksRequest, NewFilledBlocksResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewFilledBlocksRequest, NewFilledBlocksResponse>("duplex", this._transport, method, opt);
    }
    /**
     * New received and produced operations
     *
     * @generated from protobuf rpc: NewOperations(stream massa.api.v1.NewOperationsRequest) returns (stream massa.api.v1.NewOperationsResponse);
     */
    newOperations(options?: RpcOptions): DuplexStreamingCall<NewOperationsRequest, NewOperationsResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewOperationsRequest, NewOperationsResponse>("duplex", this._transport, method, opt);
    }
    /**
     * New received and slot execution events
     *
     * @generated from protobuf rpc: NewSlotExecutionOutputs(stream massa.api.v1.NewSlotExecutionOutputsRequest) returns (stream massa.api.v1.NewSlotExecutionOutputsResponse);
     */
    newSlotExecutionOutputs(options?: RpcOptions): DuplexStreamingCall<NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse>("duplex", this._transport, method, opt);
    }
    /**
     * unidirectional streaming
     *
     * @generated from protobuf rpc: NewSlotExecutionOutputsServer(massa.api.v1.NewSlotExecutionOutputsRequest) returns (stream massa.api.v1.NewSlotExecutionOutputsResponse);
     */
    newSlotExecutionOutputsServer(input: NewSlotExecutionOutputsRequest, options?: RpcOptions): ServerStreamingCall<NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Send blocks
     *
     * @generated from protobuf rpc: SendBlocks(stream massa.api.v1.SendBlocksRequest) returns (stream massa.api.v1.SendBlocksResponse);
     */
    sendBlocks(options?: RpcOptions): DuplexStreamingCall<SendBlocksRequest, SendBlocksResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendBlocksRequest, SendBlocksResponse>("duplex", this._transport, method, opt);
    }
    /**
     * Send endorsements
     *
     * @generated from protobuf rpc: SendEndorsements(stream massa.api.v1.SendEndorsementsRequest) returns (stream massa.api.v1.SendEndorsementsResponse);
     */
    sendEndorsements(options?: RpcOptions): DuplexStreamingCall<SendEndorsementsRequest, SendEndorsementsResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendEndorsementsRequest, SendEndorsementsResponse>("duplex", this._transport, method, opt);
    }
    /**
     * Send operations
     *
     * @generated from protobuf rpc: SendOperations(stream massa.api.v1.SendOperationsRequest) returns (stream massa.api.v1.SendOperationsResponse);
     */
    sendOperations(options?: RpcOptions): DuplexStreamingCall<SendOperationsRequest, SendOperationsResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendOperationsRequest, SendOperationsResponse>("duplex", this._transport, method, opt);
    }
    /**
     * Transactions throughput
     *
     * @generated from protobuf rpc: TransactionsThroughput(stream massa.api.v1.TransactionsThroughputRequest) returns (stream massa.api.v1.TransactionsThroughputResponse);
     */
    transactionsThroughput(options?: RpcOptions): DuplexStreamingCall<TransactionsThroughputRequest, TransactionsThroughputResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<TransactionsThroughputRequest, TransactionsThroughputResponse>("duplex", this._transport, method, opt);
    }
}
